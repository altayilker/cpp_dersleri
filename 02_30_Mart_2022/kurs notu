

İçerik:   


*-----------------------------------------------------------------------------------------------------
*---------------------------------  ÖZET BAŞLANGIÇ ------------------------------------------
*-----------------------------------------------------------------------------------------------------

C ve C++ dili arasındaki farklılıklar
const anahtar sözcüğü
void * 
user defined types
conventional enum(unscoped enum)
scoped enum (enum class)
initialization
zero initialization
uniform initialization (brace init.)
narrowing conversion
chaining:
function prototype scope


*-----------------------------------------------------------------------------------------------------
*----------------------------------------  ÖZET BİTİŞ --------------------------------------------
*-----------------------------------------------------------------------------------------------------


C ve C++ dili arasındaki farklılıklar

C++ içerisinde C programının bir kısmını barındırır.

C++, C'ye göre çok büyük bir dildir. C embedded için geliştirildiğinden daha minimal geliştirilmiştir.

C++ hem nesne programlama hem de C gibi programlamayı da içerir.





C++ 11 major standartlar (ilk modern C++)
C++ 14 mini
C++ 17 major
C++ 20 major

*-----------------------------------------------------------------------------------------------------

void func();
void foo(void);

C++ ta ikisi arasında anlam farkı yok.
parametre değişkeni yok demek ikiside.

*-----------------------------------------------------------------------------------------------------

yani kodun aşağısında bir değişken tanımlamak yoktu.
C++ ta bu mümkün.


*-----------------------------------------------------------------------------------------------------


const anahtar sözcüğü

C++ dilinde const değişkenlere ilk değer vermek zorunludur. 
int* const ptr = &x;
const int x = 3;
const int* ptr;  // bunda gerekmez



const T*  ===> T*    // hata, örtülü dönüşümü yok  
T*     ===>  const T*  // ok
const T  ===>  T&   // hatalı, örtülü dönüşümü yok


// constant pointer to int
 int * const ptr
// pointer to constant int
const int * 

const int* const ptr  =>  ilk const low level const, ikinci const high level const;

https://www.geeksforgeeks.org/const-qualifier-in-c/

1) Pointer to variable

int *ptr;

2) Pointer to constant. 

const int *ptr   veya    int const *ptr;


3) Constant pointer to variable.

int *const  ptr;

4) constant pointer to constant

const int *const ptr;



*-----------------------------------------------------------------------------------------------------

int main()
{
    int y; // y garbage value
    int x{};  // x = 0
}

*-----------------------------------------------------------------------------------------------------

void *   : bir tür, void pointer türüdür. Void pointer türüne diğer adres türlerinden otomatik dönüşüm var.
Void pointer türünden diğer türlere otomatik dönüşüm yok ve sentax hatasıdır.

A void pointer is a pointer that has no associated data type with it. A void pointer can hold address of any type and can be typecasted to any type.

int main ()
{
	int x = 10;
	double dx = 1.2;
	
	void *vptr =  &x;  // ok
	
	vptr = &dx;  // ok
	
	int *iptr = vptr;  //  C++'da sentax hatası
}

*-----------------------------------------------------------------------------------------------------

int f();               // declaration
int f() { return 42; } // definition

*-----------------------------------------------------------------------------------------------------

linkage ne demek ? (bağlantı)
internal , external linkage

bir fonksiyonun diğer dosyalarda kullanımı external
kendi modülünde kullanılacaksa internal linkage

C++'da static ile tanımlanırsa iç bağlantıya ait


Translation Units

Programmers usually deal with header files and implementation files. Compilers don’t – they deal with translation units (TUs), sometimes referred to as compilation units. The definition of such a translation unit is very simple: Any file, fed to the compiler, after it has been pre-processed. In detail, this means that it is the file resulting from the pre-processor expanding macros, conditionally including source code depending on #ifdef and #ifndef statements and copy-pasting any #includeed files.



http://www.goldsborough.me/c/c++/linker/2016/03/30/19-34-25-internal_and_external_linkage_in_c++/
https://www.learncpp.com/cpp-tutorial/external-linkage-and-variable-forward-declarations/
https://www.geeksforgeeks.org/internal-linkage-external-linkage-c/

Translation Unit : A translation unit is a file containing source code, header files and other dependencies. All of these sources are grouped together in a file for they are used to produce one single executable object. It is important to link the sources together in a meaningful way. For example, the compiler should know that printfdefinition lies in stdioheader file.

A translation unit refers to an implementation (.c/.cpp) file and all header (.h/.hpp) files it includes. If an object or function inside such a translation unit has internal linkage, then that specific symbol is only visible to the linker within that translation unit. If an object or function has external linkage, the linker can also see it when processing other translation units. The static keyword, when used in the global namespace, forces a symbol to have internal linkage. The extern keyword results in a symbol having external linkage.

The compiler defaults the linkage of symbols such that:

- Non-const global variables have external linkage by default
- Const global variables have internal linkage by default

Global variables and ordinary functions have external linkage.
Static object or function name at file scope is local to translation unit. That is called as Internal Linkage


*-----------------------------------------------------------------------------------------------------

user defined types:

structures
class
unions
enumerations


*-----------------------------------------------------------------------------------------------------

structures : 

empty class: yapının elemanı olmamasıdır .

structure:

struct {  
	int x;
} myData;

named structure:
struct Data{  
	int x;
}

union Nec{
	int x;
	int y;
}

enum Color {Red, Black, White};

int main()
{
	Data myData;  // struct Data myData  da kullanılabilir.
	
}







*-----------------------------------------------------------------------------------------------------


enum Color {Red, Black, White};

int main()
{
	enum Color myColor = Red;
	int ival = myColor;  // dikkat, geçerli, fakat kullanma
}


*-----------------------------------------------------------------------------------------------------

C++ iki ayrı enum türü var. enum teknik olarak sınıf değil 

conventional enum(unscoped enum)
scoped enum (enum class)


*-----------------------------------------------------------------------------------------------------

conventional enum(unscoped enum) eksiklikleri

1) // incomplete type
enum Color;

2) // kontrol dışı tür dönüşümü
int ival;
Color myColor =  Black;
ival = myColor;  // legal, gençlik hatası

3) enum türünün kapsamı neyse enumaration constant'ın kapsamı aynı.
enumaration constant'ın ayrı scope'u yok

farklı h filelardan gelen farklı enum türlerinin enumaratör olarak seçilmiş isimleri aynı ise 
sentax hatası oluşturur.

enum ScreenColor {Red, Black, White};
enum TrafficLight {Red, Yellow, Green};

iki red ismi çakışır. Sentax hatası

*-----------------------------------------------------------------------------------------------------

scoped enum (enum class)

enum class ScreenColor {Red, Black, White};
enum class TrafficLight {Red, Yellow, Green};


*-----------------------------------------------------------------------------------------------------

::      => scope resolution operator (colon colon)

enum class ScreenColor {Red, Black, White};
ScreenColor:: Red ;

*-----------------------------------------------------------------------------------------------------

enum class ScreenColor {Red, Black, White};

int main()
{
	ScreenColor mycolor = ScreenColor:: Red; 
	int ival = mycolor;
}

*-----------------------------------------------------------------------------------------------------

gelecek planı:
C++ ile ilgili genel bilgiler 
ilk değer verme (initialization)
fonksiyonların varsayılan argüman alması (default argument)
type deduction (tür çıkarımı)
referans semantics
function overloading


*-----------------------------------------------------------------------------------------------------

C++  derleyicinin tek görevi assembly kod yazmak değil ayrıca kod yazar. Bu paradigma generic programlama (Template'ler)

type deduction (tür çıkarımı): C'de yok . C++'da her yerde var.

auto x = 10;

*-----------------------------------------------------------------------------------------------------

C++ 'da anahtar kelimelerin kullanıldıkları yere göre farklı anlamlar var.
static
using 
auto
mutable


*-----------------------------------------------------------------------------------------------------

initialization:

int main()
{
	int x;  // default initialization
	const int y;  // , sentax hatası, const değişkenlere ilk değer vermek zorunlu
}


*-----------------------------------------------------------------------------------------------------

// zero initialization
int x;  // static ve global değişkenlerde 0 ile başlatılır.
bool y; // false ile başlatılır
int *gp;  // nullptr ile hayata başlar


fakat yerel değişken
int y;  // garbage value alır
int* z;  // garbage reference alır


int main()
{
	int a;  // default initialization
	int x = 10;  // copy initialization
	int y(20);  // direct initalization
	int z {30};  // uniform initialization (brace init.)
}


*-----------------------------------------------------------------------------------------------------

uniform initialization (brace init.): C++ ile geldi.

diğer init.'lerin eksikliklerini giderir. 
1.  uniform (öğrenim kolaylığı için heryerde kullanılabilir)
2. narrowing conversion sentax hatası 
3. most vexing parse'in engellenmesi

int z {30};

*-----------------------------------------------------------------------------------------------------

narrowing conversion

int main()
{
	double dval = 3.4;
	dval = ival;  // ok
	int ival = dval;  // legal fakat implicit type conversion, ondalık kısım kaybedilir. 
	int ival (dval);  // legal fakat implicit type conversion, ondalık kısım kaybedilir.Fakat derleyici uyarı verir.
	int ival {dval};  // sentaks hatası, uniform init.'de koruma var
}


*-----------------------------------------------------------------------------------------------------

scott meyers  (iyi yazar)

Effective Modern C++:


*-----------------------------------------------------------------------------------------------------

most vexing parse:

C++ öyle dil yapıları var ki 

hem bir fonksiyon bildirimi 
hem de bir nesne tanımlaması

iki anlama gelmesine most vexing parse

struct A
{
};

struct B
{
	B(A);
};

int main()
{
	B bx(A());  // ismi bx olan değişken tanımladıklarını sanıyorlar, oysa most vexing parse sonucu fonksiyon bildirmiş oluyorsunuz
	B bx{A()}; // burada değişken tanımlanmış olur.
}

--------------

A a();
 Will not call the default constructor of A, and will also be parsed into a function declaration


*-----------------------------------------------------------------------------------------------------

// derleyici

// sadece warning 
// diagnostic message


// no diagnostic required


hatalı programlara verilen terim
// ill-formed


sentax hatası genel bir terim 
gerisi derleyiciye bağlı (error mu warning mi verdi)

*-----------------------------------------------------------------------------------------------------

dizilere ilk değer verme:

int main()
{
	int a[] = {1,2,3,4,5};
	int b[] {1,2,3,4,5};
}


*-----------------------------------------------------------------------------------------------------

value initialization:

int main()
{
	int x{};  // value initialization  // sıfır ile başlama garantisi var
	bool flag{};   // value init. // false değer ile başlar
	int *ptr{};  // value init. // nullptr ile hayata başlar
	int y;   // garbage value
	int z();  // parantezin içi boş olursa fonksiyon bildirimi 
	
}


*-----------------------------------------------------------------------------------------------------

int* foo();

int main()
{
	int* p{ foo()} ;  // int* p =  foo()  ile aynı
	if( p != nullptr){   // if(p) ile aynı
		
	}
}

*-----------------------------------------------------------------------------------------------------

int x = 10;

int main()
{    
	int x = x;  // tanımsız davranış, = 'in sağında soldaki x'in scope'una girilir, sağdaki x tanımlanan int x, burada otomatik ömürlü x değişkenine kendi çöp değeri ile ilk
	değer verdiğimizden tanımsız davranış
}


*-----------------------------------------------------------------------------------------------------

int x = 10;

int main()
{    
	int x = 40;
	
	std::cout << "x: " << x << "\n";
}

isim arama önce blok içinde yapılır, bulunursa isim arama (namelookup) biter. Bulunamazsa önce kapsayan bloklarda sonra da
namespace scope'ta (global isim alanı)aranır.

*-----------------------------------------------------------------------------------------------------

scope resolution operator (::x)

derleyiciye operand olan ismin (x) namespace scope'da aranması talimatını veriyor. 

*-----------------------------------------------------------------------------------------------------

namespace scope
class scope
block scope
function prototype scope
function scope

*-----------------------------------------------------------------------------------------------------

namespace (isim alanı ) : C'de global isim alanı tek bir alan. Sizin kullandığınız bütün isimler buraya boşaltılır. Bu da farklı farklı hizmet aldığınız kütüphanelerin başlık dosyalarından gelen isimlerin çakışması riskini çok arttırıyor. 
C++ dilinde namespace alanları ile bu riskten kurtuluyor. Bunun eksiği ise farklı isim alanlarında olan ahmet.txt dosyası olsa, benden karşı taraf bana
benden ahmet.txt dosyası istese hangi isim alanında olanı göndereyim dersiniz ?

::  => unary scope resolution operator

int main()
{
	::x;  // bu bloğu içine alan ilk namespace alanı içinde arar. Bu da global namespace alanıdır. 
}

::  => binary scope resolution operator
int main()
{
	neco::x; // sol operatoru namespace ise sağ operandını o namespace içinde arar
}


*-----------------------------------------------------------------------------------------------------

namespace nec{
	int x = 10;
}

int main()
{
	x = 20;  // önce blokta aradı bulamadı,  kapsayan blokta aradı
	bulamadı, sonra global isim alanında aradı bulamadı. 
	Sentax hatası
}


*-----------------------------------------------------------------------------------------------------

namespace nec{
	int x = 10;
}

int main()
{
	nec::x = 20;  // ismi nec olan namespace'de ara
}


*-----------------------------------------------------------------------------------------------------

#include <cstring>      =>  c'deki string.h'nın C++'daki karşılığı, C'de string.h var ama string sınıfı yok
#include < string>      =>   C++

In C programming, a string is a sequence of characters terminated with a null character \0. For example:
char c[] = "c string";

*-----------------------------------------------------------------------------------------------------

int main()
{
	std::size_t    //size_t (diziler dahil) herhangi bir nesnenin boyutunu göstermek için kullanılan bir işaretsiz tamsayı türüdür.
}

It’s a type which is used to represent the size of objects in bytes and is therefore used as the return type by the sizeof operator. It is guaranteed to be big enough to contain the size of the biggest object the host system can handle. Basically the maximum permissible size is dependent on the compiler; if the compiler is 32 bit then it is simply a typedef(i.e., alias) for unsigned int but if the compiler is 64 bit then it would be a typedef for unsigned long long. The size_t data type is never negative.

Therefore many C library functions like malloc, memcpy and strlen declare their arguments and return type as size_t.

*-----------------------------------------------------------------------------------------------------

#include <iostream>
#include <cctype>

int main()
{
	char str[]  = "mustafa";
	std::puts(str);  // standart C'den gelen fonksiyonları :: ile niteleyin
}

*-----------------------------------------------------------------------------------------------------

cout terimi global değişkendir, fonksiyon değil
std namespace'i içindeki bir değişkendir.

*-----------------------------------------------------------------------------------------------------

Operator overloading:

Matrix m1, m2;   // sınıf

m1 + m2;  // operator overloading, derleyici durumdan görev çıkarsın ve fonksiyona yapılan çağrıya dönüştürsün



std::cout   <<   "ival = "   <<   ival   <<   "\n";

std::cout   => bir sınıf değişkeni
<<  => operatör overloading, bir fonksiyon çağrılır
"ival = "      =>  çağırılan fonksiyona gönderilen argüman


operator << (cout, "alican"); //   aynısı => std::cout << "alican";

std  => "stud" diye de okunur

*-----------------------------------------------------------------------------------------------------

chaining:

int main()
{
	int x = 10;
	double d{ 32.84 };
	
	cout << "x = " << x  <<  " d = " << d << "\n"; 
}

cout << "x = "   => geri dönüş değeri referans, cout nesnesinin kendisini döndürür.

cout << "x = " << x  <<  " d = " << d << "\n"; 
//  eşdeğer =>   cout  << x  <<  " d = " << d << "\n"; 

function overloading de var. string ve double tür değerini yazdıran fonksiyonlar 


*-----------------------------------------------------------------------------------------------------

cout << "fatih\n";   => yazıyı yazdırır, << global fonksiyondur
cout.operator << ("fatih");  => bu yazının adresini yazdırır. <<  sınıfın üyesidir.


*-----------------------------------------------------------------------------------------------------


int main
{
	int x = 10;
	
	// soru: call by value mi call by reference mi ?
	func(x);  // call by value;
}

*-----------------------------------------------------------------------------------------------------

int main
{
	std::cout << "bir tam sayi girin:   ";
	int x{ };
	
	std::cin.operator >> (x);  // referans semantiği
	// x'e bir değer yerleştirir.
}


*-----------------------------------------------------------------------------------------------------

function prototype scope:

void func(int, int); // iki şekilde bildirim de uygun !!!
void func(int x, int y);  //function prototype scope
// bu isimler x ve y sadece bu parantez içerisinde bilinirler.


*-----------------------------------------------------------------------------------------------------

void foo(int )  // C++'da geçerli
{

}


*-----------------------------------------------------------------------------------------------------

// parameter
void func(int x )
{

}

int main()
{
	func(12);  // argument
}

*-----------------------------------------------------------------------------------------------------



void func(int,  int = 10);   // ikinci parametresi varsayılan argüman

int main()
{
	func(5,6);  // varsayılan argüman kullanılmadı
	func(3);  // func(3,10);  varsayılan argüman 10
}


*-----------------------------------------------------------------------------------------------------

int g = 10;
void func(int , int = g+5);


*-----------------------------------------------------------------------------------------------------

int foo(int = 5, int = 9);
void func(int, int = foo());


*-----------------------------------------------------------------------------------------------------

void func(int = 10, int = 20, int = 30);

int main()
{
	func(7,8,9);
	func(7,8);  // func(7,8,30);
	func(7);  // func(7,20,30);
	func(); // func(10,20,30);
}

void func(int x, int y, int z)
{
	std::cout << "x = " << x << "y = " << y << "z =  " << z << "\n";
}


*-----------------------------------------------------------------------------------------------------


If you are using prefix form then increment or decrement will be done before rest of the expression, and if you are using postfix form, then increment or decrement will be done after the complete expression is evaluated.

#include <iostream>
using namespace std;
main() {
   int a = 21;
   int c ;
   // Value of a will not be increased before assignment.
   c = a++;   
   cout << "Line 1 - Value of a++ is :" << c << endl ;
   // After expression value of a is increased
   cout << "Line 2 - Value of a is :" << a << endl ;
   // Value of a will be increased before assignment.
   c = ++a;  
   cout << "Line 3 - Value of ++a is  :" << c << endl ;
   return 0;
}


*-----------------------------------------------------------------------------------------------------

int x = 10;

void func(int = x++);

int main()
{
	func();  // func(x++)  // 10  // her seferinde tekrar değerlendirilir
	func(); // func(x++)  // 11 
	func(); // func(x++)  // 12
}

void func(int a)
{
	std::cout << a << '\n';
}

*-----------------------------------------------------------------------------------------------------

