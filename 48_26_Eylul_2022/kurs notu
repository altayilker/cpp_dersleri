
İçerik:

std::invoke
not_fn
std::function
Dinamik ömürlü nesneler 

özet:


*----------------------------------------------------------------------------------------------------- 

functional.h'in içinde sunulan öğeleri öğrenmeye devam ediyorduk. 

std::invoke : genel bir fonk. çağırıcısı. Bana bir callable ver, o callable'in çağırılması
için argümanları ver, her halükarda o callable'i çağırayım. 
a) template kodlar içinde generic olarak fonk. çağırısı yapmayı kolaylaştırıyor.
b) member function pointer söz konusu olduğunda .*, ->*  operatörlerini kullanmadan 
yani daha karmaşık görüntüye neden olmadan fonk.'u çağırabiliyor.

her türlü callable'i kabul eder. Bu sınıfın bir üye fonk. da olabilir. 

*----------------------------------------------------------------------------------------------------- 

notlar:

fonksiyon olarak çağırabildiğin her şey bir callable. 
(fonksiyon, functor, function pointer, lambda)

predicate : binary predicate, unary predicate.
bool döndürmeli !!!
(fonksiyon, functor, function pointer, lambda)
bool döndüren özel bir callable !!!!

*----------------------------------------------------------------------------------------------------- 


class Myclass{
public:
	void func()
	{
		std::cout << "Myclass::func()\n";
	}
};

int main()
{
	Myclass m;
	Myclass* p{ &m };
	
	auto mfp = &Myclass::func;  // member function pointer
	
	(m.*mfp)();  //  
	(p->*mfp)(); // bir üst ile aynı
	
	std::invoke(mfp, m);
	std::invoke(mfp, p);  // bir üst ile aynı, template olduğu için kendisi hallediyor
}

*----------------------------------------------------------------------------------------------------- 

soru : "function to pointer conversion" global fonk. için ve sınıfın static üye fonk. için
örtülü olarak yapılıyor. Fakat member function'ın ismi her context'te adrese dönüştürülmüyor.
O yüzden adres operatörünü açıkça kullanıyorum. 

hangi context'te gerekiyor hangi context'te gerekmiyor onu düşünmek istemiyorsanız
her zaman kullanın !!!!

*----------------------------------------------------------------------------------------------------- 

kendime hatırlatma:

function pointer :

https://www.geeksforgeeks.org/function-pointer-in-c/

In C, like normal data pointers (int *, char *, etc), we can have pointers to functions.

1) Unlike normal pointers, a function pointer points to code,
2) Unlike normal pointers, we do not allocate de-allocate memory using function pointers.


#include <stdio.h>
// A normal function with an int parameter
// and void return type
void fun(int a)
{
	printf("Value of a is %d\n", a);
}

int main()
{
	// fun_ptr is a pointer to function fun()
	void (*fun_ptr)(int) = &fun;

	/* The above line is equivalent of following two
	void (*fun_ptr)(int);
	fun_ptr = &fun;
	*/

	// Invoking fun() using fun_ptr
	(*fun_ptr)(10);

	return 0;
}

3) A function’s name can also be used to get functions’ address. For example, in the below program, we have removed address operator ‘&’ in assignment. We have also changed function call by removing *, the program still works.


#include <stdio.h>
// A normal function with an int parameter
// and void return type
void fun(int a)
{
	printf("Value of a is %d\n", a);
}

int main()
{
	void (*fun_ptr)(int) = fun; // & removed

	fun_ptr(10); // * removed

	return 0;
}

4) Like normal pointers, we can have an array of function pointers.


6) Like normal data pointers, a function pointer can be passed as an argument and can also be returned from a function.

For example, consider the following C program where wrapper() receives a void fun() as parameter and calls the passed function.


// A simple C program to show function pointers as parameter
#include <stdio.h>

// Two simple functions
void fun1() { printf("Fun1\n"); }
void fun2() { printf("Fun2\n"); }

// A function that receives a simple function
// as parameter and calls the function
void wrapper(void (*fun)())
{
	fun();
}

int main()
{
	wrapper(fun1);
	wrapper(fun2);
	return 0;
}


----------

functor (function object) :

A functor (or function object) is a C++ class that acts like a function. To create a functor, we create a object that overloads the operator().

A functor is pretty much just a class which defines the operator(). That lets you create objects which "look like" a function:

The line,
MyFunctor(10);

Is same as
MyFunctor.operator()(10);


// C++ program to demonstrate working of
// functors.
#include <bits/stdc++.h>
using namespace std;

// A Functor
class increment
{
private:
	int num;
public:
	increment(int n) : num(n) { }

	// This operator overloading enables calling
	// operator function () on objects of increment
	int operator () (int arr_num) const {
		return num + arr_num;
	}
};

// Driver code
int main()
{
	int arr[] = {1, 2, 3, 4, 5};
	int n = sizeof(arr)/sizeof(arr[0]);
	int to_add = 5;

	transform(arr, arr+n, arr, increment(to_add));

	for (int i=0; i<n; i++)
		cout << arr[i] << " ";
}

*----------------------------------------------------------------------------------------------------- 

functional.h başlık dosyasında incelemediğimiz 

not_fn : bir fonk. adaptörü
std::function : callable sarmalayan bir sınıf

*----------------------------------------------------------------------------------------------------- 

not_fn : bir fonk. adaptörü
sizden bir callable alıyor size bir callable veriyor. İstediği unary predicate.
Size yine bir unary predicate verir. Sizin verdiğiniz predicate'in değil'ini
döndürüyor.


int main()
{
	using namespace std;
	
	auto f = not_fn(isprime);  // geri dönüş değeri olan callable'i bir değişkende tuttum
	
	f(19);  // isprime'a göndersem true değer döndürürdü.
	// şimdi isprime'a gönderecek ama onun değilini geri döndürecek 
	
	cout << boolalpha;
	cout << f(19) << "\n";
	cout << f(20) << "\n";
}

*----------------------------------------------------------------------------------------------------- 

#include <vector>
#include <algorithm>
#include <iterator>

int main()
{
	using namespace std;
	
	vector<int> ivec;
	vector<int> destvec;
	
	rfill(ivec, 200, Irand{0, 100'000});
	
	copy_if(ivec.begin(), ivec.end(), back_inserter(destvec), isprime);  // pred. olarak isprime kullanılıyor
	print(destvec);
}

---------------------------------------------- 

int main()
{
	using namespace std;
	
	vector<int> ivec;
	vector<int> destvec;
	
	rfill(ivec, 200, Irand{0, 100'000});
	
	copy_if(ivec.begin(), ivec.end(), back_inserter(destvec), !isprime);  // hata, böyle yazamam
	print(destvec);
}

---------------------------------------------- 

int main()
{
	using namespace std;
	
	vector<int> ivec;
	vector<int> destvec;
	
	rfill(ivec, 200, Irand{0, 100'000});
	
	copy_if(ivec.begin(), ivec.end(), back_inserter(destvec), not_fn(isprime));  // ok, bu şekilde yazılmalı !!!
	print(destvec);
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	vector<string> ivec;
	vector<string> destvec;
	
	rfill(svec, 200, Irand{0, 100'000});
	
	auto f = [](const std::string &s){return s.find('a') != string::npos; };
	
	copy_if(svec.begin(), svec.end(), back_inserter(destvec), f);    // içinde 'a' olanlar kopyalanacak
	print(destvec);
}

---------------------------------------------- 

int main()
{
	using namespace std;
	
	vector<string> ivec;
	vector<string> destvec;
	
	rfill(svec, 200, Irand{0, 100'000});
	
	auto f = [](const std::string &s){return s.find('a') != string::npos; };
	copy_if(svec.begin(), svec.end(), back_inserter(destvec), not_fn(f));    // içinde 'a' olmayanlar kopyalanacak
	print(destvec);
}

*----------------------------------------------------------------------------------------------------- 

zaten bazı argümanın not'ı kendinden var :

#include <vector>
#include <algorithm>
#include <iterator>

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	rfill(svec,40, rname);
	print(svec);
	
	size_t len;
	
	cout << "uzunluk: ";
	cin >> len;
	auto fpred = [len](const string &s){return s.length() == len; };
	
	if(auto iter = find_if(svec.begin(), svec.end(), fpred); iter != svec.end()){
		cout << "bulundu " << *iter << " distance = " << distance(svec.begin(), iter) << "\n";
	}
	else{
		cout << "bulunamadi\n";
	}

}

---------------------------------------- 

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	rfill(svec,40, rname);
	print(svec);
	
	size_t len;
	
	cout << "uzunluk: ";
	cin >> len;
	auto fpred = [len](const string &s){return s.length() == len; };
	
	if(auto iter = find_if(svec.begin(), svec.end(), not_fn(fpred)); iter != svec.end()){
		cout << "bulundu " << *iter << " distance = " << distance(svec.begin(), iter) << "\n";
	}
	else{
		cout << "bulunamadi\n";
	}

}

---------------------------------------- 

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	rfill(svec,40, rname);
	print(svec);
	
	size_t len;
	
	cout << "uzunluk: ";
	cin >> len;
	auto fpred = [len](const string &s){return s.length() == len; };
	
	if(auto iter = find_if_not(svec.begin(), svec.end(), not_fn(fpred)); iter != svec.end()){
		cout << "bulundu " << *iter << " distance = " << distance(svec.begin(), iter) << "\n";
	}
	else{
		cout << "bulunamadi\n";
	}

}

------------------------------------------------------------------------------------ 
------------------------std::function -------------------------------------
------------------------------------------------------------------------------

std::function : çok kullanışlı, çok işe yarıyor
diğer taraftan yüksek maliyet içerdiği için çok eleştirilere maruz kaldı

genel bir callable sarmalayıcısı, belirli bir parametrik yapıdaki callable'i sarmalıyor, 
 ve siz std:function nesnesinin fonk. çağrı operator fonk.'unu çağırdığınızda
o da fonk. çağrısını sarmaladığı callable'in fonk. çağrısına dönüştürür.
std::function fonksiyon adaptörü değil. 
kendisi bir sınıf. siz std::function sınıfın türünden bir nesne kullanıyorsunuz.

Ne işe yarar ki ?
1) genelleştirilmiş bir callback yapısı oluşturuyor
C'de function pointer'dır.
C++'da function object'i de callback olarak kullanabilirim
callback olarak std::function türünden türünden bir nesne oluşturursam buna 
her türlü parametrik yapıya sahip callable'i gönderebilirim. 
Yeter ki callable benim istediğim yapıda olsun.

2) container'larda tutubiliyorsunuz.
container'da function pointer da tutabilirim. Ama sadece fonk. adresi tutabilirsiniz.
şöyle hayal edin, bir eleman closure object, bir eleman function pointer'ı, bir eleman vs.
müthiş bir araç

eleştiri maliyet konusunda tereddütler var. 

*----------------------------------------------------------------------------------------------------- 

int cube(int x)
{
	return x * x * x;
}

int main()
{
	using namespace std;
	
	std::function<int(int)> fn = cube;
	// veya =>  std::function<int(int)> fn = &cube;
	// template argümanı fonk. türü olmalı, fonk. adresi türü değil
	
	cout << fn(12) << "\n";
}

*----------------------------------------------------------------------------------------------------- 

int cube(int x)
{
	return x * x * x;
}

struct Functor{
	int operator()(int x)const
	{
		return x = 12;
	}
};

int main()
{
	using namespace std;
	
	std::function<int(int)> fn = cube;
	
	cout << fn(12) << "\n";
	
	fn = [](int a){return a * a + 1}; // lambda ifadesi de geçici nesnedir
	cout << fn(12) << "\n";
	
	fn = Functor{};  // sağ taraf Functor türünden geçici nesne.
	cout << fn(12) << "\n";
}

*----------------------------------------------------------------------------------------------------- 

arka planda type erasure kullanılır. 

*----------------------------------------------------------------------------------------------------- 

int cube(int x)
{
	return x * x * x;
}

struct Functor{
	int operator()(int x)const
	{
		return x = 12;
	}
};

class Myclass{
public:
	static int foo(int a)
	{
		return -a;
	}
};

int main()
{
	using namespace std;
	
	std::function<int(int)> fn = cube;
	
	cout << fn(12) << "\n";
	
	fn = [](int a){return a * a + 1}; // lambda ifadesi de geçici nesnedir
	cout << fn(12) << "\n";
	
	fn = Functor{};  // sağ taraf Functor türünden geçici nesne.
	cout << fn(12) << "\n";
	
	fn = Myclass::foo;
	cout << fn(12) << "\n";
}

*----------------------------------------------------------------------------------------------------- 

int foo(int a, int b)
{
	return a + b + 10;
}

int main()
{
	using namespace std;
	
	function fn = foo;
	
	cout << fn(12, 45) << " ";
}

------------------------------------------ 

int foo(int a, int b)
{
	return a + b + 10;
}

int main()
{
	using namespace std;
	
	function f = [](int a, int b){ return a*b; };
}

*----------------------------------------------------------------------------------------------------- 

int foo(int a, int b)
{
	return a + b + 10;
}

using ftype = std::function<int(int)>;

int main()
{
	using namespace std;
	
	cout << sizeof(decltype(&foo)) <<  "\n";
	cout << sizeof(ftype) <<  "\n";  // arkada bir magic oluyor, type erasure'u öğrenmek lazım
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	function<int(int)> f;
	
	if(f){  // aslında sınıfın operator bool fonk. çağırılır.  // f.operator bool()
		cout << "ben sana bos degilim\n";
	}
	else{
		cout << "ben kendimi bombos hissediyorum\n";
	}
	
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	function<int(int)> f;
	
	if(f == nullptr){
		cout << "ben kendimi bombos hissediyorum\n";
	}
	else{
		cout << "ben sana bos degilim\n";
	}
	
}

*----------------------------------------------------------------------------------------------------- 

int foo(int x){ return x + 1;}

int main()
{
	using namespace std;
	
	function<int(int)> f;

	f = foo;
	
	if(f){ 
		cout << "ben sana bos degilim\n";
	}
	else{
		cout << "ben kendimi bombos hissediyorum\n";
	}
}

*----------------------------------------------------------------------------------------------------- 

int foo(int x){ return x + 1;}

int main()
{
	using namespace std;
	
	function<int(int)> f;
	
	try{
		auto val = f(20);
	}
	catch(const std::bad_function_call& ex){
	// (const std::exception& ex)
		cout << "exception caught: " << ex.what() << "\n";
	}
	
}

*----------------------------------------------------------------------------------------------------- 

using fn_type = std::function<int(int)>;

void func(fn_type fn)  // genel bir callback yapısı, ister function object gönder, ister gerçek fonk.
gönder, herşeyi kabul ederim diyor.
{
	auto x = fn(24);
	cout << "x = " << x << "\n";
	//..
}

int bar(int x){return x * 5; };

int main()
{
	func(bar);
	func([](int a){return a*a}; );
}

*----------------------------------------------------------------------------------------------------- 

using fn_type = std::function<int(int)>;

int square(int a)
{
	std::cout << "int foo(int)\n";
	return a*a;
}

struct Multiply
{
	Multiply(int cal) : mx{val}{}
	int operator()(int x)const
	{
		return x * mx;
	}
	int mx{};
};

int sum_square(int a, int b)
{
	return a * a + b * b
}

int main()
{
	using namespace std;
	using namespace placeholders;
	
	vector<fn_type> myvec;
	
	// 4 callable
	myvec.emplace_back(square); // bir fonk. adresi
	myvec.emplace_back(Multiply{10});  // bir function object
	myvec.emplace_back([](int a){return 2 * a * a; }); // lambda ifadesi
	myvec.emplace_back(bind(sum_square, 10, _1)); // bind

	for(auto& fn : myvec){
		cout << fn(40) << "\n";
	}
	
}

*----------------------------------------------------------------------------------------------------- 

using fn_type = std::function<int(int)>;

class Myclass{
private:
	fn_type m_f;
};

---------------------------------------------------------------------------
------------------  Dinamik ömürlü nesneler -------------------
---------------------------------------------------------------------------

malloc'un karşılığı new C++'da. Ne alakası var. Nesne oluşturmuyor ki
dinamik bellek alanı elde ediyor. Başarılı olursa elde ettiği bellek bloğu adresi
döndürüyor. Başarısızsa nullptr döndürür. Dinamik ömürlü nesne oluşturmak
tamamen farklı. 


Dinamik ömürlü nesne ne demek ?
statik ömür : programın sonuna kadar hayatı devam eder. Global değişken, static
yerel değişkenler ve string literalleri.

otomatik ömür: programın akışı o koda girdiğinde hayatı başlayan, onların scope'ları
sonuna geldiğinde hayatı biten nesneler. Fonksiyon parametre değişkenleri, ve 
fonk. içinde static anahtar sözcüğü olmadan tanımlanan nesneler

scope'dan bağımsız hayatı devam etmeli, istenildiği zaman hayatına son
verebileceğimiz nesne.

dynamic storage : nesneleri istediğimiz zaman hayata getirip hayatını sonlandırdığımız
için böyle ihtiyaç var. 

Dinamik ömürlü nesneler heap'te tutuluyor diye tutturmuşlar gidiyo. 
Gömülü sistem uygulaması heap yok, işletim sistemi yok. Dinamik ömürlü
nesne kullanamayacak mıyım orada ? tabi ki kullanabileceğim.

*----------------------------------------------------------------------------------------------------- 

Dinamik ömürlü nesne != dynamic storage

sınıf nesnesi zaten nasıl eşit olur

*----------------------------------------------------------------------------------------------------- 

soru:

class Myclass{
	///
};

int main()
{
	void* vp = malloc(sizeof(Myclass)); // C'deki malloc çağırılmış, sınıfın const. çağırılmıyor
	// neden çağırılsın ? çağırılmaz !!!
}

*----------------------------------------------------------------------------------------------------- 

new expressions :

new operatörleri diyoruz ama standartlar kapsamında konuşuyor olsak new ifadesi dememiz
gerekir. 

new ifadeleri ile dinamik ömürlü nesneleri hayata başlıyoruz.

delete ifadeleri ile dinamik ömürlü nesnelerin hayatlarını sonlandırıyoruz.

----------------------------------------- 

birden fazla new ifadesi var:

new string
new Fighter

new Fighter[n]
new (buffer)Fighter
new (std::nothrow)Fighter

delete ptr;

delete[] ptr;

*----------------------------------------------------------------------------------------------------- 

üretimde new ifadelerini sıklıkla kullanacak mıyız ?

hayır, çok çok az kullanılır. 

new ifadeleri yerine standart container türünden nesneler kullanacağız. vector nesnesi gibi
veya smart pointer'ları kullanacağız.

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	new Date; 
}


*----------------------------------------------------------------------------------------------------- 

new ifadesi karşılığı üretilen kod: 

önce standart kütüphanenin operator new fonk. çağırıyor. Bu fonk. malloc
gibi bir fonksiyon.

void* operator new(size_t);  
void* malloc(size_t);

operator new(sizeof(Fighter)); // eğer başarılı olursa allocate edilmiş bellek bloğunun
adresini döndürür.

Peki malloc ile operator new arasındaki fark ise malloc başarısız olsa nullptr döndürür,
operator new başarısız olduğunda std::bad_alloc türünden bir exception throw eder.

Burdan elde ettiği adresi sınıf türüne cast ediyor, sınıf türünden point tutan . 
Bu adresi this pointer'i olarak kullanıp bu adreste sınıfın const.'ını kullanıyor. 

(Fighter*)(operator new(sizeof(Fighter)))->

new ifadesi = operator new + constructor

*----------------------------------------------------------------------------------------------------- 

soru : operator new fonk.'unu new ifadesi olmadan kendim de çağırabilir miyim ?

tabi ki operator new de standart kütüphanenin fonksiyonu.

*----------------------------------------------------------------------------------------------------- 

std::vector<void*> gvec;

void func()
{
	for(int i = 0; i < 100'000; ++i){
		gvec.push_back(operator new(1024 * 1024 * 10));
		std::cout << i << "\n";
	}
}

int main()
{
	using namespace std;
	
	try{
		func();
	}
	catch (const std::bad_alloc& ex){
		std::cout << "exception caught: " << ex.what() << "\n";
	}
}

*----------------------------------------------------------------------------------------------------- 

std::vector<void*> gvec;

int main()
{
	using namespace std;
	
	void* vp = operator new(40'000u);
}

*----------------------------------------------------------------------------------------------------- 

new Fighter oluşturduğu değer bir pointer, referans semantiği yok.

*----------------------------------------------------------------------------------------------------- 

#include "nutility.h"
#include "date.h"
#include <new>

int main()
{
	auto p = new Date(1, 4, 1987); // adresini p isimli pointer'da tuttuk.
	// p : Date*
}

------------------------------------------------ 

int main()
{
	auto p = new const Date(1, 4, 1987); // new ile  const bir nesne de oluşturulabilir
	// p : const Date*
	
	const Date *p = new Date(1, 4, 1987); // üsttekinden farklı, burada contractial const. sağlamış oluyorsunuz,
	üstte nesne const oluyor.
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	auto p = new Date;  // çağırılan default const.
	// Date * p = new Date;
	// Date &p = new Date; // bu yazım şekli çok kullanılmıyor, bu sefer delete& r yazılmalı
	
	auto p = new Date{};  // value init, brace init.
	auto p = new Date(); // value init, 
}

*----------------------------------------------------------------------------------------------------- 

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor\n";
	}

	Myclass(int x)
	{
		std::cout << "Myclass(int x) x = " << x << "\n";
	}
};

int main()
{
	std::cout << "main basladı\n";
	auto pm = new Myclass(34);  // new Myclass{34}
	
	delete pm;
	std::cout << "main devam\n";
}

*----------------------------------------------------------------------------------------------------- 

delete olmayınca ne olur ?

memory leak : allocate edilen bir bellek bloğunun geri verilmemesi
resource leak : edinilen bir kaynağın geri verilmemesi

delete operatörü ile dinamik ömürlü nesnenin hayatını sonlandırmadığımız zaman
ne destructor'ı çağırılıyor, ne de allocate edilen bellek bloğu geri veriliyor.
Yani 2 problem var.
1) destructor'ın çağırılmaması
2) allocate edilen bellek bloğunun geri verilmemesi

------------------------------------------ 

delete ifadesi ile nasıl kod üretilir ?

delete pm;

pm hangi sınıf türü ise o sınıfın destructor'ına çağrı yapmakta (this pointer'i olarak) kullanıyor.
operator delete fonk. çağırılır. Operator new tarafından allocate edilen bellek bloğu derleyicinin
operator delete'e çağrı yapması sonucu geri verilmiş oluyor. 

void operator delete (void *p);   
void free(void *p); // delete gibi

yani bellek alanını allocate eden operator new fonk.
allocate edilmiş bellek bloğunu geri veren operator delete fonk.

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	size_t n;
	
	cout << "kac tam sayi : ";
	cin >> n;
	
	auto p = static_cast<int*>(operator new(n * sizeof(int)));
	
	for(size_t i{}; i < n; ++i){
		p[i] = i;
	}
	
	operator delete(p);
}

*----------------------------------------------------------------------------------------------------- 

delete pm;
// önce destructor çağırır, sonra operator new ile elde edilmiş bellek bloğu 
operator delete ile geri veriliyor. 

*----------------------------------------------------------------------------------------------------- 

malloc çağırılmışsa free çağrılmalı
new çağırılmışsa delete çağırılmalı

*----------------------------------------------------------------------------------------------------- 

new ifadesi overload edilemez.

overload edilebilen operator new, operator delete'dir. 

*----------------------------------------------------------------------------------------------------- 

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}

	unsigned char buffer[1024]{};
};

int main()
{
	std::cout << "sizeof(Myclass) = << sizeof(Myclass) << "\n";
	
	auto pm = new Myclass;
	
	delete pm;
}

*----------------------------------------------------------------------------------------------------- 

// operator new'in overload'u
// derleyici standart kütüphanenin operator new'i yerine senin yazdığını mı çağıracak, kesinlikle !!!

# include <cstdlib>  // malloc için

void* operator new(std::size_t n)
{
	std::cout << "my operator new function called ! n = " << n << "\n";
	void* vp = std::malloc(n);  // operator new'in kendisi de malloc'u mu çağırıyor ? ne bileyim ben :)
	
	if(!vp){
		throw std::bad_alloc{};
	}
	
	std::cout << "the address of the allocated block is : " << vp << "\n";
	
	return vp;
}

void operator delete(void *vp)
{
	std::cout << "my operator delete function called ! vp = " << vp << "\n";
	
	std::cout << vp << " the memory block at the address of " << vp << " freed\n";
	std::free(vp);
}


class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}

	unsigned char buffer[1024]{};
};

int main()
{
	std::cout << "sizeof(Myclass) = << sizeof(Myclass) << "\n";
	
	auto pm = new Myclass;
	
	delete pm;
}

// yukarıdaki kodların bazı eksikleri var, ama kavramsal olarak operator new ve operator delete'in böyle olduğunu düşünebilirsiniz.

*----------------------------------------------------------------------------------------------------- 

new operatorünü değil operator new fonk. overload edebilirim
delete operatorünü değil operator delete fonk. overload edebilirim

üstelik operator new ve delete fonk.'larını global olarak overload edebildiğim gibi
bir sınıf için de overload edebiliyorum.

global olarak overload edilince bütün new ifadelerinde bizimki çağırılır
bir sınıf için overload edilince sadece o sınıf türü için çağırılır.

*----------------------------------------------------------------------------------------------------- 

array new : amaç bellekte ardışık n tane dinamik ömürlü nesne dizisi oluşturmak

----------------------------------------------------- 

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}

	unsigned char buffer[256]{};
};

int main()
{
	using namespace std;
	
	size_t n;
	cout << "kac nesne: ";
	cin >> n;
	
	auto p = new Myclass[n];  // p yine dinamik dizi adresi
	// n kadar const. çağırılır !!!
	
	delete[] p;  
	// köşeli parantez içine birşey yazmayacaksınız, dizinin son elemanından başlayarak
	bütün elemanlar için destructor çağırılacak. Daha sonra operator delete[] fonk çağırılacak.
	allocate edilen bellek bloğu geri verilecek
	
	// burada sadece  delete p;  kullanılsa undefined behavior
}

*----------------------------------------------------------------------------------------------------- 

soru : 

# include <cstdlib>  // malloc için

void* operator new(std::size_t sz)
{
	std::cout << " operator new function called for the size of : " << sz << "\n";
	
	if(sz == 0)
		++sz;
		
	if(void* ptr = std::malloc(sz))
		return ptr;
		
	throw std::bad_alloc{};
}

void operator delete(void *vp) noexcept
{
	std::cout << "operator delete called for the address of : " << ptr << " \n";
	std::free(ptr);
}

int main()
{
	using namespace std;
	
	auto p = new string(20000, 'A'); 
	
	delete p;  
}

çoğu programcının karıştırdığı konu :
// kaynak kullanan sınıflar söz konusu olduğunda vector, string gibi
operator new sizeof(string) string nesnesinin kendisi için ayrılır. Bir de 20000 karakterlik 
veri tutulması için minimal 20000 byte'lik yer ayırıyor.
iki kez const. çağırılır

// sizeof(string) için ve  20000 byte'lik veri için ayrı ayrı destructor çağırılacak 
iki kez destructor çağırılır. çünkü iki ayrı bellek alanı var. 

*----------------------------------------------------------------------------------------------------- 

small string(buffer) teknik : 


int main()
{
	using namespace std;
	
	auto p = new string("volkan);  // yazı küçük olduğu için yazıyı string sınıf nesnesinin içindeki buffer'i kullandı.
	// small string(buffer) teknik ile yapılan iyi bir optimizasyon !!! tek const. çağırır, tek destr. çağırılır
	
	delete p;  
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	int n;
	
	cout << "kac dizi : ";
	cin >>  n;
	
	int** p = new int*[n] = // bu ifade doğru, elemanları int* türü olan n elemanlı dizi
	
	for(int i = 0; i < n; ++i){
		p[i] = new int[10]{ }; // dinamik pointer dizisi elemanlarına dinamik int dizi adreslerini
		yerleştirdi.
	}

}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	size_t row, col;
	
	cout << "matrisin satır ve sutun sayısını girin: ";
	cin >> row >> col;
	
	int** pd = new int* [row];
	
	for(size_t i{}; i < row; ++i){
		pd[i] = new int[col];
	}
	
	Irand myrand{0, 9};
	
	for(size_t i{}; i < row; ++i){
		for(size_t k{}; k < row; ++k){
			pd[i][k] = myrand();
		}
		cout << "\n";
	}
	
	for(size_t i{}; i < row; ++i){{
		delete[]pd[i];
	}
	
	delete[]pd;
	
}

*----------------------------------------------------------------------------------------------------- 

placement new : ilave argüman alır, bir tanesi sizden bir tane adres
istiyor, ve sizden aldığı adreste nesneyi oluşturuyor. 


class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}

	unsigned char buffer[256]{};
};

int main()
{
	using namespace std;
	
	cout << "sizeof(Myclass) = " << sizeof(Myclass) << "\n";
	
	char buffer[sizeof(Myclass)];
	cout << "buffer dizi adresi " << (void*)buffer << "\n";
	
	auto p = new(buffer) Myclass;  // new buffer adresini ister !!!!
}

// gerçekten bu adreste nesneyi oluşturmuş, böyle bir new ifadesi olmasaydı
container'lar nasıl nesne oluşturacaktı.

-------------------------- 

int main()
{
	using namespace std;
	
	cout << "sizeof(Myclass) = " << sizeof(Myclass) << "\n";
	
	char buffer[sizeof(Myclass)];
	cout << "buffer dizi adresi " << (void*)buffer << "\n";
	
	auto p = new(buffer) Myclass;  // new buffer adresini ister !!!!
	
	delete p;  // felaket olur. delete karşılığı sınıfın destr. çağırır. 
	// ama sonra operator delete'e adresi gönderiyordu.
	// ama operator new ile allocate edilmedi ki ben local dizinin
	içinde nesneyi oluşturdum.
	// operator new ile allocate edilmeyen bir bellek bloğunu 
	// operator delete ile geri veremezsin. Hata, tanımsız davranış
}

-------------------------- 

int main()
{
	using namespace std;
	
	cout << "sizeof(Myclass) = " << sizeof(Myclass) << "\n";
	
	char buffer[sizeof(Myclass)];
	cout << "buffer dizi adresi " << (void*)buffer << "\n";
	
	auto p = new(buffer) Myclass;  // new buffer adresini ister !!!!
	
	
	// nesnenin hayatının bitmesi için destructor'ının çağırılmasını
	// istiyorum ama delete de edemiyorum.
	p->~Myclass();  
}

*----------------------------------------------------------------------------------------------------- 

hangi durumda destructor'ı ismiyle çağırıyoruz ? (çok ender bir durum)

benim temin ettiğim bir bellek alanında nesneyi oluşturduğumda 
onun destruc.'nın çağırılmasını delete operatorü ile yapmamalıyım.
Çünkü tanımsız davranış olur. 

*----------------------------------------------------------------------------------------------------- 

standart kütüphanenin operator_new fonk.'nu yazar mısınız ?

void* operator new(size_t n, void* vp)
{
	return vp;
}

auto p = new(buffer) Myclass;  
// buffer'a adres,  birinci parametre sizeof

// buffer alanı daha küçükse tanımsız davranış.


*----------------------------------------------------------------------------------------------------- 

new ifadelerinde bir allocation fonk. çağırılıyor, ondan sonra
sınıfın const.'ı çağırılıyor. 

*----------------------------------------------------------------------------------------------------- 

nothrow new : diğer new ifadelerinden farklı olarak çağırılan operator
fonk. başarısız olursa bad_alloc exception throw etmek yerine nullptr 
döndürür. 

*----------------------------------------------------------------------------------------------------- 

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}

	unsigned char buffer[256]{};
};

int main()
{
	using namespace std;
	
	auto p = new(nothrow)Myclass;
	if(!p){
	
	}

}

// nothrow aslında bir nesnenin ismi,
std::nothrow ismi

--------------------------------------------------- 

standart kütüphanede bir çok yerde function overload resolution'da
kullanılması için global empty class nesneleri kullanılıyor

struct nothrow_t{

};

constexpr nothrow_t nothrow;

*----------------------------------------------------------------------------------------------------- 

operator new
operator delete

fonksiyonlarının bir sınıf için overload edilmesi :

sadece o sınıf türünden nesneler oluşturulduğunda bizim fonk.
allocation'ı gerçekleştirecek. Sadece o sınıf türünden pointer'lar
delete edildiğinde bizim operator delete fonk. çağırılacak.

--------------------------------- 

normalde bir üye fonk.'nun static üye fonk. olması için static anahtar sözcüğü
bildirimde olması gerekir. Bunun bir istisnası operator new, operator delete 
bunlar static anahtar sözcüğü olmadan bildirilse dahi static üye
fonk. kabul edilir. 

--------------------------------- 

kendi new fonk. yazmak :

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}
	
	void* operator new(std::size_t n)  // baş kısma static yazılabilir
	{
		std::cout << "Myclass::operator new(size_t n) n = " << n << "\n";
		void* vp = std::malloc(n);
		if(!vp){
			throw std::bad_alloc{};
		}
		std::cout << "the address of allocated block is " << vp << "\n";
		return vp;
	}

	unsigned char buffer[256]{};
};

int main()
{
	auto p1 = new Date{1, 2, 1998};
	delete p1;
	
	auto p2 = new Myclass;  // Myclass sınıfının operator new fonk. çağırılacak
}

--------------------------------- 

kendi delete fonk. yazmak :

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default ctor this = << this << "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor this = " << this << "\n";
	}
	
	void* operator new(std::size_t n)  // baş kısma static yazılabilir
	{
		std::cout << "Myclass::operator new(size_t n) n = " << n << "\n";
		void* vp = std::malloc(n);
		if(!vp){
			throw std::bad_alloc{};
		}
		std::cout << "the address of allocated block is " << vp << "\n";
		return vp;
	}

	void* operator delete(void* vp)
	{
		std::cout << "Myclass::operator delete(void *vp) vp = " << vp << "\n";
		std::cout << "the address of freed block is " << vp << "\n";
		std::free(vp);
	}
	
	
	unsigned char buffer[256]{};
};

int main()
{
	auto p = new Myclass;
	delete p;
}

----------------------------------------- 

// standart kütüphanenin global operator new ve delete'i kullanılabilir

int main()
{
	auto p = ::new Myclass;  
	::delete p;
}

*----------------------------------------------------------------------------------------------------- 

soru :

Myclass mc = new Date;  // olabilir mi ?

// olabilir ama Myclass sınıfının Date* parametreli
const.'nın olması gerekiyor. 

---------------------------

#include <memory>
#include "data.h"

int main()
{
	using namespace std;
	
	unique_ptr<Date> uptr{ new Date(12, 5, 1987) };
	// uptr'nin const.'ına new Date(12, 5, 1987)'nı gönderebiliyorum !!!
	// uptr'nin Date* parametreli bir const.'ı var.
}

unique pointer'ı böyle çalışıyor. parametresi bir sınıf türünden pointer

*----------------------------------------------------------------------------------------------------- 

int main()
{
	new Date{1, 1, 2023};
	
}

new ifadesi kullanıldığı zaman derleyici operator new'i çağırır. Başarısız
olursa bad_alloc sınıfı türünden exception throw eder. 
mesele biraz daha karmaşık.
Aslında operator new fonk. derleyici tarafından 

--------------------------- 

using new_handler = void (*)(void);
// veya aynısı => typedef void (*new_handler)(void);

new_handler gp{ };  // global gösterici

new_handler get_new_handler();
new_handler set_new_handler(new_handler);

void* operator new(size_t n)
{
	for(;;){
		void*vp = std::malloc(n);
		if(vp){
			return vp;
		}
		new_handler fp = get_new_handler();
	}
	fp();
}

*----------------------------------------------------------------------------------------------------- 

