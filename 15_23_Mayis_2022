

İçerik:   


*-----------------------------------------------------------------------------------------------------
*---------------------------------  ÖZET BAŞLANGIÇ ------------------------------------------
*------------------------x-----------------------------------------------------------------------------

Friend declerations
friend bildirimi kimlere verilebilir ?
operator overloading
operatör yüklemesi genel kurallar
arity of operator
üye operator fonks. olarak overload edilmesi


*-----------------------------------------------------------------------------------------------------
*----------------------------------------  ÖZET BİTİŞ --------------------------------------------
*-----------------------------------------------------------------------------------------------------

class Nec{
public:
	void func();
	static void sfunc();
};

int main()
{
	Nec mynec;
	
	mynec.func(); // mynec'in adresi this pointer'ına aktarılır
	
	mynec.sfunc();  // this pointer'ı yok, mynec salt isim arama için kullanılır, konunun mynec ile doğrudan bir ilgisi yok
	
}

*------------------------------------------------------------------------------------------------------

static üye fonksiyonların kullanıldığı tipik temalar:
1) hayata gelmiş nesne sayısının tutulması
2) bir sınıf nesnesinin hayattaki bütün
sınıf nesneleri ile irtibatını sağlamak

*------------------------------------------------------------------------------------------------------

// named constructor idiom
(isimlendirilmiş nesne idiomu)

sınıfın bir üye fonksiyonu bir nesne oluşturma amacını taşıyor. Sınıf client kodların nesneleri const. yoluyla değil de isimlendirilmiş const. dediğimiz sınıfın üye fonksiyonun kullanılması ile oluşturulması.

class Myclass{
	Myclass();  // const. private olabilir
public:
	static Myclass create_object();
	
};

int main()
{
	auto m = Myclass::create_object();
	// bu fonksiyonu kullanmadan nesne oluşturmak mümkün değil !!
}

neden böyle birşey yapayım ?
sınıfın const. overload etmek istiyorsun fakat parametrik yapı aynı.


*------------------------------------------------------------------------------------------------------

class Complex{
public:
	Complex(double distance, double angle);  // polar
	Complex(double r, double i); // cartezian
};

*------------------------------------------------------------------------------------------------------

constr.'lar client kodlar erişemesin diye private tanımlanmış


class Complex{
private:  
	Complex(double distance, double angle);  // polar
	Complex(double r, double i, int); // cartesian
public:
	static Complex create_polar(double d, double a){
		return Complex(d, a);
	}
	static Complex create_cartesian(double r, double i){
		return Complex(r, i, 0);
	}
};

*------------------------------------------------------------------------------------------------------

bütün sınıf nesnelerin dinamik ömürlü olması

class DynamicOnly{
private:
	DynamicOnly();
public:
	static DynamicOnly* create_object();
	{
		return new DynamicOnly{};
	}
};

*------------------------------------------------------------------------------------------------------

Daha çok smart pointer'lar kullanılıyor, new neredeyse hiç kullanılmıyor !!

class Myclass{};

int main()
{
	Myclass* p = new Myclass; 
}


*------------------------------------------------------------------------------------------------------

smart pointer örneği (ileride işlenecek)

class Myclass{
public:
	Myclass()
	{
		std::cout << "Myclass default const.   this : " << this << "<< "\n";
	}
	
	~Myclass()
	{
		std::cout << "Myclass destructor const.   this : " << this << "<< "\n";
	}
};

int main(){
	
	std::cout << "main basladi\n";
	{
	auto uptr = std::make_unique<Myclass> ();
	}  // scope bitince destructor çağırıldı, delete etti
	
	std::cout << "main devam ediyor\n";
}

*------------------------------------------------------------------------------------------------------

Friend declerations:
sınıfların private ve protected bölümleri client kodlara kapalı. 

Sınıfın protected bölümleri: Sadece kalıtım yoluyla elde edilecek sınıflara ve sınıfın kendi fonksiyonlarına açık. 

Sınıfın private bölümü: sınıfın kalıtım yoluyla elde edilecek sınıflara da kapalı. 
Private bölüm sadece sınıfın kendi fonksiyonlarına açık. 

Friend bildirimi ile sınıfın üye fonksiyonu olmayan bir veya birden fazla fonksiyona sınıfın private bölümüne erişim hakkı verilir. 

*------------------------------------------------------------------------------------------------------

sınıfın interface'i sınıfın fonksiyonları ve global fonksiyonlardır

*------------------------------------------------------------------------------------------------------

int main()
{
	using namespace std;
	
	string s1{"eray"}, s2{"goksu"};
	
	auto s3 = s1 + s2;
	// auto s3 = operator+(s1,  s2);
	// aslinda global bir fonksiyon çağırılıyor.
}


*------------------------------------------------------------------------------------------------------

friend bildirimi mümkün olduğu kadar az kullanmak lazım

*------------------------------------------------------------------------------------------------------

friend bildirimi kimlere verilebilir ?
a) free function'a (global func.)
// herhangi bir namespace içinde bulunabilir !!!
b) başka bir sınıfın üye fonksiyonuna (çok nadir kullanılır), derleyici bu sınıfı complete type olarak görmek zorunda, incomplete type'da geçerli değil
c) başka bir sınıfa (tüm üye fonksiyonlarına)

// en sık kullanılan
a > c > b

*------------------------------------------------------------------------------------------------------

class Nec{
private:
	int mx, my;
	void foo();
};

void gf()  // global fonksiyon
{
	Nec nec;
	auto i = nec.mx;  // sentax hatası
	nec.foo();  // sentax hatası
}


*------------------------------------------------------------------------------------------------------

class Nec{
public:
	friend void gf();
private:
	int mx, my;
	void foo();
};

void gf()  // global fonksiyon
{
	Nec nec;
	auto i = nec.mx;  // ok
	nec.foo();  // ok
}


*------------------------------------------------------------------------------------------------------

class Nec{
public:
private:
	friend void gf();  // hiçbir fark yok
	int mx, my;
	void foo();
};

Nec nec;  // 

void gf()  // global fonksiyon
{
// nec nesnesine global, yerel olsa friend içerisinde problem olmaz

	auto i = nec.mx;  // ok
	nec.foo();  // ok
}  

friend bildirimi public, private, protected'de yapılabilir, bir anlam farkı olmaz.


*------------------------------------------------------------------------------------------------------

class Nec{
public:
	friend void gf();  
private:
	int mx, my;
};

int main()
{
	gf();  // bu fonksiyon böyle çağırılamaz
}


*------------------------------------------------------------------------------------------------------

class Nec{
public:
	friend void gf(Nec); 
	//  friend bildirimi sınıfın isim alanına bildirilmiş değil !!!
private:
	int mx, my;
};

int main()
{
	Nec nec;
	gf(nec);  // legal, ilginç !!!
	// namespace'de öğrenilecek, ADL, argument depended lookup
}

*------------------------------------------------------------------------------------------------------

b) başka bir sınıfın üye fonksiyonuna (çok nadir kullanılır), derleyici bu sınıfı complete type olarak görmek zorunda, incomplete type'da geçerli değil


// incomplete type:
class A;  // class decleration

class Nec{
public:
	friend void A::foo(int);  // geçersiz
private:
	int mx, my;
};


// complete type:
class A {
public:
	void foo(int);
};

class Nec{
public:
	friend void A::foo(int);  // geçerli !!!
private:
	int mx, my;
};


*------------------------------------------------------------------------------------------------------

// complete type:
class A {
public:
};

class Nec{
public:
	friend A::A();  // geçerli !!!, constructor olması friend'lik vermemizi engellemez !! tek şart sınıfın complete type olması
private:
	int mx, my;
};

void A::foo(int)
{
	Nec mynec;
	
	mynec.mx = 10;
}

*------------------------------------------------------------------------------------------------------

komple sınıfa arkadaşlık vermek:
(sınıfın tüm fonksiyonlarına arkadaşlık vermek), arkadaşlık verilen sınıf complete type olmak zorunda değil

class Nec{
public:
	friend class Eray;
private:
	int mx, my;
};

*------------------------------------------------------------------------------------------------------

class Eray{
private:
	void foo();
}

class Nec{
public:
	friend class Eray::foo();  // legal değil
private:
	int mx, my;
};

ileride göreceğimiz nested class'larla ilgili ayrı bir kural seti var

*------------------------------------------------------------------------------------------------------

class Myclass{
public:
	friend class Nec;
private:
	int mx, my;
};
// Nec sınıfının bütün fonksiyonlarına friend'lik verildi.

class Nec{
public:
	void foo()
	{
		Myclass m;
		m.mx = 4;
	}
private:
	void func()
	{
		Myclass m;
		m.mx = 4;
	}
};

*------------------------------------------------------------------------------------------------------

class A{
	friend class B;   // B, A'nın private bölümüne erişebilir, tam tersi geçerli değil
};

*------------------------------------------------------------------------------------------------------

class A{
	friend class B;  
};

class B{
	friend class C;  // C, B'nin private bölümüne erişebilir
};
// C, A'nın private bölümüne erişemez  !!!
arkadaşımın arkadaşı arkadaşım değil !!

*------------------------------------------------------------------------------------------------------

kalıtımda göreceğiz
class Base{
	friend class X;
};

class Der : public Base{

};

X sınıfın Der sınıfının private bölümüne erişemez !!!
Base sınıfın verdiği arkadaşlık türemiş sınıfı bağlamaz. 

*------------------------------------------------------------------------------------------------------

operator overloading: (operator yükleme)

Amaç kodun daha kolay yazılması ve okunmasını sağlamaktır.  Operatorlerin 
primitiv türler için verdiği çağrışımdan sınıfların da yararlanmasını sağlamak.
maaliyeti : yok, derleme zamanına yönelik


Bir sınıf nesnesi bir operatörün operandı olduğunda derleyici bu ifadeyi bir fonksiyon çağrısına dönüştürüyor.

i1 + i2
s1 + s2
yüksek bir çağrışım yapıyorsa operator overloading kullanabilirsin.


int main()
{
	m1 = m2* m3 + m4;  // matris
	add(multiply(m2, m3), m4); // daha zor
	
}

*------------------------------------------------------------------------------------------------------

operatör yüklemesi genel kurallar:
1) olmayan operatör overload edilemez
mesela @

2) her operator overload edilemez.

sizeof
.   member selection
? : ternary operator 
:: scope resolution operator
typeid operator
.* operator

3) sık overload edilen operatorler :

a[b ]
ptr->func()
f( )

primitiv türler için operator fonksiyonu bildirilemez. En az bir operand sınıf türünden ya da enum türlerinden olmalı
i1, i2
!ival

4)  keyfi olarak isimlendirilemiyor, operatör fonksiyonları , isimlerinde operator keyword'ü kullanılmalı

operator+
operator!
operator>
operator<
operator=

5)  bir operatör fonksiyonu sınıfın statik üye fonksiyonu olarak bildirilemez. 

- global operator fonksiyonu
- üye operator fonksiyonu olabilir

6) tüm operator fonksiyonları (operator notasyonunu kullanmadan) isimleriyle çağrılabilirler.

a + b     a.operator+(b)
x > y     operator>(x, y)

7) Bazı operatörler için yalnızca üye operatör fonksiyonu bildirilebilir. Global operator fonksiyonu bildirilemez.  Global operator fonksiyonu ile overload edilemez. 

[ ]
( )
 ->
tür dönüştürme operatör fonksiyonları
special member function atama operator fonksiyonları

*------------------------------------------------------------------------------------------------------

soru: special member function atama operator fonksiyonları nedir ?

copy asssignment
move assignment

*------------------------------------------------------------------------------------------------------

arity of operator:
operator binary (2) mi unary(1) mi anlamına gelir.

a / b

BigInt operator/(const BigInt& x, const BigInt& y);

a / b   =>    operator/(a, b)

!a  =>   operator!(a)

*------------------------------------------------------------------------------------------------------

class Biggy{

};

Biggy operator/(Biggy);  // sentax hatası, iki parametre lazım

int main()
{

}

*------------------------------------------------------------------------------------------------------

class Biggy{

};

Biggy operator/(Biggy, Biggy); 
Biggy operator!(Biggy); 

int main()
{
	Biggy x, y;
	
	auto z1 = x/y;
	auto z2 = operator/(x, y);
	bool b1 = !x;
	bool b2 = operator!(y);
}

*------------------------------------------------------------------------------------------------------

üye operator fonksiyon olarak overload edilmesi:

binary operator ise tek parametresi olur çünkü sol operand *this nesnesi olur.

class Biggy{
public:
	Biggy operator/(Biggy);
};

int main()
{
	Biggy x, y;
	
	auto z = x/ y;  
	// auto z = x.operator/(y);
	// sol operand nesne için çağırılır
	// this'i yazdırsam x'in adresi yazılır
}

*------------------------------------------------------------------------------------------------------

unary operator için:

class Biggy{
public:
	Biggy operator!()const;
};

int main()
{
	Biggy x, y;
	
	auto b = !x;
	// auto b = x.operator!(); 
	
}


*------------------------------------------------------------------------------------------------------

// eğer operand'a bişey koymazsak derleyici hata vermez çünkü o zaman bu operator işaret operatorü olur !!!

class Biggy{
public:
	Biggy operator+();  // işaret operatorü
};

int main()
{

}


*------------------------------------------------------------------------------------------------------

Dört tane token var ki iki farklı operator görevinde:
1)  +x   => sign operator
x+ y   => addition operator

2)  -x  => sign operator
x -y =>  subtraction operator

3)  *ptr  => dereferencing operator
x * y  => multiplication operator

4) &x  =>adress of operator
a & b => bitwise and operator


bu tokenlar hem binary hem unary overload edilebilir !!!

*------------------------------------------------------------------------------------------------------

operator overloading , function overloading ile birlikte kullanılabilir

class Myclass{
public:
	Myclass operator+(int)const;
	Myclass operator+(double)const;
	Myclass operator+(std::string)const;
};

*------------------------------------------------------------------------------------------------------

int main()
{
	int x = 0;
	int y = 10;
	
	auto b = x && y++;
	//logic ve operator yanlış olması durumunda ikinci ifade hiç yürütülmez. Buna short circuit behavior denir.
	
	// y 'nin değeri nedir ?
	// y = 10;
}

*------------------------------------------------------------------------------------------------------

x && y++  // && overload edilirse kısa devri davranışı short circuit behavior olmaz !!! 


*------------------------------------------------------------------------------------------------------


operator fonksiyonları için (biri hariç) varsayılan argüman alamaz.
istisna : fonksiyon çağrısı operatörü

class X {
public:
	X operator+(int ival = 0);  // geçersiz, çünkü varsayılan argüman alamaz
	
	int operator()(int x = 10);  // geçerli
};

int main()
{
	X xa;
	
	xa();  // xa.operator()(10)
	xa(20); // legal, xa.operator()(20)
}

*------------------------------------------------------------------------------------------------------

operator önceliği ve öncelik yönü değiştirilemez !!!

class Myclass{

};

Myclass operator+(const Myclass&, const Myclass&);
Myclass operator*(const Myclass&, const Myclass&);
Myclass operator!(const Myclass&);
Myclass operator>(const Myclass&, const Myclass&);  // global fonksiyonlar


int main()
{
	Myclass m1, m2, m3, m4;
	
	auto b1 = m1 + m2 * m3  > m4;
	// auto b = (m1 + (m2 * m3 )) > m4;
	// auto b2 = operator>(operator+(m1,operator*(m2,m3)), m4);  // aynısı
	
	auto b3 = (m1 + m2) * m3  > m4;
	// auto b2 = operator>(operator*(operator*(m1,m2),m3), m4);
}

*------------------------------------------------------------------------------------------------------

class Myclass{
public:
	Myclass operator+(const Myclass&)const;
	Myclass operator*(const Myclass&)const;
	Myclass operator>(const Myclass&)const;  // üye fonksiyonlar
};


int main()
{
	Myclass m1, m2, m3, m4;
	
	auto b1 = m1 + m2 * m3  > m4;
	// auto b2 = m1.operator+(m2.operator*(m3)).operator>(m4);
}


*------------------------------------------------------------------------------------------------------

class Myclass{

};

int main()
{
	Myclass m1, m2;
	
	m1 = m2;
	m1.operator=(m2);
}

*------------------------------------------------------------------------------------------------------

operator overloading ilk tanışma !!!

int main()
{
	using namespace std;
	
	int x = 1;
	double dval = 3.4;
	char c = 'A';
	
	cout << x;
	// cout.operator<<(x);
	// cout bir nesne
	
	// dikkat !! burada bazı fonksiyonlar global operator fonksiyonu bazıları üye operator fonksiyonu
	
	cout.operator<<(c);  // sınıfın üye operator fonk. int  // 54 yazar
	
	cout << 'a';
	operator << (cout, c) ; // global operator fonksiyonu
	
	
	cout.operator<<(c);   // sınıfın üye operator fonks.
	operator << (cout, c) ;  //  global operator fonksiyonu
	
	cout << "ozan cansel";
	// operator<<(cout, "ozan cansel");
	
	cout.operator<<("ozan cansel");
	// ozan cansel yazmaz onun adresini yazar
}

*------------------------------------------------------------------------------------------------------

	char c = 'A';
	cout.operator<<(c);   // sınıfın üye operator fonks.
	operator << (cout, c) ;  //  global operator fonksiyonu

*------------------------------------------------------------------------------------------------------

class Ostream{
public:
	Ostream& operator<<(int);  // int'i yazdıran
	Ostream& operator<<(double);  // double'ı yazdıran
	Ostream& operator<<(Ostream&(*)(Ostream&));  // endl'yi yazdıran
};

Ostream& operator<<(Ostream&, const* char);  // string literal'i yazdıran
Ostream& operator<<(Ostream&, char); // char'ı yazdıran


int main()
{
	using namespace std;
	
	int x = 1;
	double dval = 3.4;
	char c = 'A';  // " " cstring  olur,   ' ' olunca char olur
	// cstring aslında char dizisi !!!
	

	cout  << x << " " << dval << " " << c << endl;
	// operator<<(operator<<(operator<<(cout.operator<<(x), " ").operator<<(dval), " "), c).operator<<(endl);
	
}

*------------------------------------------------------------------------------------------------------

int main()
{
	using namespace std;
	
	string s1{"ali"}, s2{"can"};

	if(s1 + s2 == "alican")
	// operator == (operator+(s1,s2), "alican"));
		cout << "evet esit\n";
	else
		cout << "hayir esit degil\n";
}


*------------------------------------------------------------------------------------------------------

ternary operator  ? :
relational operator   a == b

*------------------------------------------------------------------------------------------------------

class Matrix {

public:
};

Matrix operator+(const Matrix&, const Matrix&)

*------------------------------------------------------------------------------------------------------

class Date{
public:
	Date operator+(int day)const;
	Date operator-(int day)const;
	int operator-(const Date&)const;
	
};


*------------------------------------------------------------------------------------------------------

class Date{
public:
	bool operator<(const Date&)const
	// sol operandın değişmeyeceğini vurgulayan const üye fonksiyonun const. olması ama sağ operandın değişmeyeceğini vurgulayan const& olması
};

// a < b
// a.operator<(b)

bool operator<(const Date&, const Date&);

*------------------------------------------------------------------------------------------------------

fonksiyonun geri dönüş değeri  eğer o ifade lvalue expr ise referans türü olacak yoksa referans türü olmayacak !!!
	
class Date{
public:
	Date& operator=(const char*);
	// atama operatörü ile oluşturulan ifadeler lvalue expr ise referans türü olacak yoksa referans türü olmayacak !!!
	Date& operator++();
};

int main()
{
	Date mydate;
	mydate = "12-05-1986";
}


*------------------------------------------------------------------------------------------------------

class Bigint{

public:
	Bigint operator+()const;  // const çünkü + operatorü bir yan etkisi olan operator değil
};

int main()
{
	Bigint x;
	
	+x; // işaret operatörü + rvalue expr.
}


