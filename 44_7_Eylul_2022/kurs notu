İçerik:

array

özet:



*----------------------------------------------------------------------------------------------------- 

Myclass'ın üye fonksiyonlarından biri F sınıfı türünden 
bir nesnenin üye fonk.'unu çağırabilir mi ?

template<typename T, typename F>
class Myclass{

	void foo()
	{
		
	}
};

-------------------------

iki yolu var :
1) 

template<typename T, typename F>
class Myclass{

	void foo()
	{
		mf();
	}
	
	F m_f;
};

2) F template parametresi

template<typename T, typename F>
class Myclass{

	void foo()
	{
		F{}(a, b);
	}
};

-------------------------------------

bu soru nerden çıktı ?

set'in implementasyonunda ikinci template parametresi türünden 
bir veri elemanı var mıdır ? karşılaştırma işleminin yapacak nesne /
function pointer veya nesne sınıfın veri elemanı olmak zorunda mı ?

using namespace std;

/*
	less<int>{ }(a, b)  // default constructable olmalı  
*/


int main()
{
	set<int> myset;

}

// bu şekilde sınıfın veri elemanı olması gerekmiyor
ama less sınıfı türünden nesneler default constructable olmalı. 

------------------------------------ 

veri elemanı olduğu zaman:

using namespace std;

template<typename T, typename C = less<T>...>
class set{

private:
	C m_comp;
}

// eğer bu durumda set'in default const. çağırılınca veri elemanı m_comp
için de default const. çağırılacak. 
// eğer burada comparator olarak kullanılan türün default const. yoksa
sentax hatası oluşur. Çünkü bunun default const. yoksa eğer default const. 
derleyici tarafından yazıldığında veri elemanları default init edilecek.
Default init edildiğinde default const. yoksa delete edilecek. 

*----------------------------------------------------------------------------------------------------- 

using namespace std;

int main()
{
	auto f = [](int a, int b){return a < b};
	
	set<int, decltype(f)> myset;  // sentax hatası, attempting to reference to a deleted function
	// delete edilen fonk. set'in const. değil, closure type'in const.
	// 2020 standartlarından önce lambda'ların default const. deleted durumda idi.
	// burada set'in const.'ı closure type türünden veri elemanının default const.'ını çağırıyor
	// closure type   decltype(f) default const. sahip değil, delete edilmiş durumda
	
	// ama C++ 20 standartlarında kural değişti, stateless lambda'lar default const.'a sahip
	// deleted değil, 
}

---------------------------------------- 

set'in const.'ları neler ?

https://en.cppreference.com/w/cpp/container/set/set


explicit set( const Compare& comp,
             const Allocator&alloc=Allocator());

bu const. diyor ki bana ikinci template parametresi türünden bir nesne göndereceksin, bu nesneyi veri elemanını init etmekte kullanır.
ama siz default const. 'ı çağırdığınızda comp. nesneyi init etmek için sizden bir veri istemiyor. Onun default const. çağırılabilir olmalı.
Peki comp. türü bir function pointer da olabilir. Öyle ise eğer sınıfın bu türden veri elemanı olursa değeri null pointer olur demek. 
Böyle bir veri elemanı varsa ve siz o function pointer'ın gösterdiği fonk. çağırırsanız undefined behavior olur. 
function pointer'ın bir fonk. göstermesi gerekir. 

--------------------------------------------------------- 

using namespace std;

bool mycomp(int x, int y)
{
	return std::abs(x) < std::abs(y);
}

int main()
{
	// set<int, decltype(&mycomp)> myset;
	set<int, bool (*)(int, int)> myset; // function pointer value init edildiği için değeri nullpointer olur, bir fonk. çağırılmayacak, runtime hatası
	
	auto x = myset.find(12);
	
}

--------------------------------------------------------- 

using namespace std;

bool mycomp(int x, int y)
{
	return std::abs(x) < std::abs(y);
}

int main()
{
	bool (*fp)(int, int) = nullptr;
	fp(12, 23); // runtime hatası olur, sentax hatası olmaz, fp çağırılacak bir fonk. adresi tutumuyor
}

--------------------------------------------------------- 

böyle bir hata olmaması için ne yapıyoruz ?

set'in default const.'ını değil de, 

explicit set( const Compare& comp,
             const Allocator& alloc=Allocator());

set'in şu const. çağırılır. Bunu çağırınca 

	set<int, bool (*)(int, int)> myset(&mycomp);

aldığı argümanı veri elemanı olan comp. nesnesini init etmek için kullanır. 

--------------------------------------------------------- 

using namespace std;

bool mycomp(int x, int y)
{
	return std::abs(x) < std::abs(y);
}

int main()
{
	bool (*fp)(int, int) = mycomp;  // runtime hatası olmaz, çünkü mycomp fonk. çağırılırdı
	fp(12, 23);
}

*----------------------------------------------------------------------------------------------------- 

soru : sentax hatası olur mu ?

class Myclass{

};

void func(Myclass);

int main()
{
	func({});  // sentax hatası olmaz, 
	// derleyici argümanın parametrenin Myclass türünden olduğunu görünce default const. çağırır. 
	func(Myclass{});  // func({})'a eşdeğer
}

---------------------------------------- 

nedene eşdeğer ?

class Myclass{

};

void func(Myclass);

int main()
{
	// default const. etmenin yolları :
	Myclass m;  // default init.
	Myclass  m{};  // value init. 
	Myclass  m = {};
	Myclass  m =  Myclass{};
 }

---------------------------------------- 

class Myclass{
public:
	explicit Myclass();
};

void func(Myclass);

int main()
{
	Myclass  m =  Myclass{}; // ok
}

---------------------------------------- 

class Myclass{
public:
	explicit Myclass();
};

void func(Myclass);

int main()
{
	Myclass  m =  {}; // sentax hatası
}

---------------------------------------- 

const. explicit olmayınca sentax hatası yok,

class Myclass{
public:
	Myclass();
};

void func(Myclass);

int main()
{
	Myclass  m =  {}; // ok
}

---------------------------------------- 

class Myclass{
public:
	
};

void func(Myclass);

int main()
{
	func({});  // ok, bunun nedeni sınıfın default const. olması ve default const.'nın explicit olmaması
}

---------------------------------------- 

class Myclass{
public:
	Myclass()
	{
		std::cout << "default\n";
	}
	
	Myclass(int)
	{
		std::cout << "Myclass(int)\n";
	}
	
	Myclass(int, int)
	{
		std::cout << "Myclass(int, int)\n";
	}
	
	Myclass(int, int, int)
	{
		std::cout << "Myclass(int, int, int)\n";
	}
};

void foo(Myclass) {}


int main()
{
	foo({});  // sınıfın default const. çağırılır, default const. explicit olsa legal olmaz
	foo({4}); // legal, int parametreli const. çağırılır, int parametreli const. explicit olsa legal olmaz
	foo(4); // legal, int parametreli const. çağırılır, int parametreli const. explicit olsa legal olmaz
	foo({23, 56}); // legal, iki int parametreli const. çağırılır. 
	foo({23, 56, 11});  // legal, üç int parametreli const. çağırılır. 
	foo(12);  //  foo(Myclass{12})'ye denk , tek argüman olunca 12 doğrudan ifade olduğu için explicit. const. olmayan const. kullanarak Myclass'a dönüştürür
	
	foo(12, 98);  // legal değil
	 foo({12, 98}); // ok
}

*----------------------------------------------------------------------------------------------------- 

using namespace std;

void func(pair<int, double>);

int main()
{
	func({3, 4.5});  // ok
}

--------------------------------------------------- 

using namespace std;

template<typename T, typename C = less<T>...>
class set{

private:
	C m_comp;
}

int main()
{
	mymap.insert({3, 8}); // insert fonk. parametresi pair türünden referans, bunun CTAD'la alakası yok
}

*----------------------------------------------------------------------------------------------------- 

CTAD :

için template argümanının çıkarımının yapılıyor olması lazım

*----------------------------------------------------------------------------------------------------- 

kendi hasher'imiz , string'i hash etmek için kullanılan bir hasher

size_t get_hash_value(const std::string& s) 
{
	size_t sum{};
	
	for( auto c : s)  // c'nin türü char olur
		sum += c;
		
		return sum;
}

------------------------------------------------ 

int main()
{
	unsigned int sum{};
	
	sum += 2;  // ok,  int unsigned'a dönüştürülür
	
	sum += -23;  // hatalı, sonuç yanlış olur,  sum = sum + (-23);  // -23 pozitif bir sayı olarak işleme sokuldu
	
	std::cout << "sum = " << sum << "\n";
}

------------------------------------------------ 

int main()
{
	int x = -1;
	unsigned int y = 1;

	if(x > y)  // tehlikeli, int x unsigned int'e dönüştürülür !!!
		std::cout << "dogru\n";
}

--------------------------------------------------------------------------------------------- 
-----------------------------------  array -------------------------------------------------
--------------------------------------------------------------------------------------------- 

neden C dizisini doğrudan kullanmak yerine bir diziyi sarmalayan bir sınıf (wrapper class) kullanayım ?

1) sınıf olduğu zaman üye fonk. sahip olacak ve dolayısıyla bir interface'i olacak
2) sınıf olduğunda STL'e daha iyi uyum sağlar (begin, end'i olabilir)
3) exception throw edilebilir
4) fonksiyonların parametresi dizi olamaz
5) fonksiyonların geri dönüş türü dizi türü olamaz
6) array decay olasılığı devre dışı kalıyor. (diziler array decay'e uğrar, bu dönüşüm istenmeyebilir)

 iyi bir fikir, büyük çoğunlukla dizi yerine std::array kullan

*----------------------------------------------------------------------------------------------------- 

stl'deki öğelerin çoğu boost'ta olan algoritmalar.

ama standart hale geldiğinde boost'tan aynısı alınmıyor.
*----------------------------------------------------------------------------------------------------- 

https://en.cppreference.com/w/cpp/container/array

struct anahtar sözcüğü ile tanımlanmış

bazı struct'lar belirli koşulları sağladığı zaman aggregiate type tür kategorisine
dahil oluyorlar. Aggregiate initizalization'dan faydalanabilir
örneğin diziler doğrudan aggregiate type

------------------------------------------------------ 

#include <iostream>
#include <array>

struct Date{
	int a, b, c;
};

int main()
{
	Date mydata = {2, 5, 9};  // ok
	// bu aggregiate init.'tir
}

--------------------------------------------------- 

class Date{
	int a, b, c;
};

int main()
{
	Date mydata = {2, 5, 9};  // sentax hatası, init. list değil bu,
	// bu aggregiate init.'tir
	// aggregiate type olma özelliğini yitirdi
}

--------------------------------------------------- 

struct Date{
	int a[5];
};

int main()
{
	Date mydata = {1, 2, 3, 4, 5};
}

--------------------------------------------------- 

struct Date{
	int a[5];
};

int main()
{
	Date mydata;  // bunun a değerleri çöp değer mi ?
	
	for(int i = 0; i < 5; ++i){
		std::cout << mydata.a[i];
	}
}

--------------------------------------------------- 

struct Date{
	int a[5];
};

int main()
{
	Date mydata{};  //  value init, zero init ediliyor
	
	for(int i = 0; i < 5; ++i){
		std::cout << mydata.a[i];
	}
}

--------------------------------------------------- 

neden bu konulara değiniyoruz ?
çünkü std:array böyle bir structure ve aggregiate init. kurallarına tabi !!! 

struct Date{
	int a[5];
};

--------------------------------------------------- 

using namespace std;

int main()
{
	array<double, 60> x;
}

--------------------------------------------------- 

#include <array>

template <typename T, std::size_t N>
struct Array{

	T ma[N];
};

int main()
{
	Array<int, 5> ax{1, 2, 3, 4, 5};  // legal olmasını sağlayan aggregiate init,
	sınıfın init. list parametreli constructor'ı yok
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	std:: array<int, 5> ax; // default init, çöp değerlerle başlar
	// ax bir dizi değil, bir sınıf türünden bir nesne
	// [ ]'nun operandı olması operator overload ile mümkün
	
	for(int i = 0; i < 5; ++i){
		ax[i] = 
	}
}

*----------------------------------------------------------------------------------------------------- 

https://en.cppreference.com/w/cpp/container/array


*----------------------------------------------------------------------------------------------------- 

#include <array>

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar);

int main()
{
	print(std:: array<int, 5>{}) ; 
	print(std:: array<double, 5>{}) ; 
	print(std:: array<string, 5>{}) ; 
}

*----------------------------------------------------------------------------------------------------- 

	print(std:: array<int, 5>{}) ; 
	print(std:: array<int, 6>{}) ; 
	
	dikkat, ikisi farklı türlerdir !!!

*----------------------------------------------------------------------------------------------------- 

#include <array>

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar);

int main()
{
	using namespace std;
	
	array<int, 5> a1;
	array<char, 5> a2;
	
	a1 = a2;  // geçerli değil !!! char'in int'e atanabiliyor olması array'in 
	atanacağı anlamına gelmez
	// bunlar farklı sınıf türleridir
}

*----------------------------------------------------------------------------------------------------- 

#include <string>

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar)
{
	for(const auto& x : ar)  // range based for loop
		std::cout << x << ' ';
	
	std::cout << '\n';
}

// sizin tanımladığınız nesne de range base loop'da kullanılabilir ama
bazı fonk.'ların tanımlanması gerekiyor !!!!
class Myclass{

};

int main()
{
	using namespace std;
	
}

*----------------------------------------------------------------------------------------------------- 

	range based for loop: vector, list, array için kullandık

*----------------------------------------------------------------------------------------------------- 

#include <string>
#include <array>
#include "nutility.h"

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar)
{
	for(const auto& x : ar)  // range based for loop
		std::cout << x << ' ';
	
	std::cout << '\n';
}

int main()
{
	using namespace std;
	
	array<int, 5> a{1, 3, 6, 9, 2};
	
	int* p = a;  // hata, array decay olmadığı için adrese dönüşmüyor dizi ismi 
	
	auto p = a; // ok, 
	
	print(a);  
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	int a[5] = {1, 2, 4, 5, 8};
	
	for(int i = 0; i < 5; ++i){
		cout << 5[a] << " ";
		// *(5 + a)
	}
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 5> ar = {1, 2, 4, 5, 8};
	
	for(int i = 0; i < 5; ++i){
		ar[i];  // ar'nin [ ] operator fonk. çağır demek, yani ar.operator[](i)
		5[ar];  // bu yazılmaz çünkü array decay yok, ar pointer'a dönüşmüyor
	}
	
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array ar = {1, 2, 4. , 5, 8};  // sentax hatası
	
	array ar = {1.1, 2.2, 3.3};  // ok
	
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 5> ar{0};
	
	ar.empty(); // empty fonk. var, geri dönüş değeri bool
	// array'de insert, remove, erase yok çünkü bu C dizisini sarmalar
	
	cout << boolalpha;
	cout << ar.empty() << "\n";  // default olarak bool değer için 0-1 olarak
	yazar, true false yazılmasını istiyorsak ostream nesnesinin format
	state'ini değiştirmemiz gerekiyor. 
	
}

------------------------------------------- 

// bool değerleri true false olarak yazdırmak

int main()
{
	using namespace std;
	
	array<int, 5> ar{0};
	
	cout.setf(ios::boolalpha);  // set format fonk. çağırılmalı
	
	cout << ar.empty() << "\n";  
	
	cout.unsetf(ios::boolalpha);
}

----------------------------------------------- 

	cout.setf(ios::boolalpha) ile 
	cout << boolalpha  
	ile boolalpha(cout)    aynı işi yapar !!!
	
----------------------------------------------- 

	cout.unsetf(ios::boolalpha) ile 
	cout << noboolalpha  
	ile noboolalpha(cout)    aynı işi yapar !!!

*----------------------------------------------------------------------------------------------------- 

array<int, 5>ar{1}

bu dizi yapısında 1. eleman yapısındaki diğer elemanlar 0 ile mi ilk değer alır ?

 cevap : evet, sebebi aggregate init. 

------------------------------ 

int main()
{
	int a[5] = { 1 };  // bu dizinin diğer elemanları sıfır değerini alır. 
}

*----------------------------------------------------------------------------------------------------- 

struct Date{
	int a[5];
};

int main()
{
	Data mydata = {1};
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 0> ar;
	
	ar.empty(ar);
	cout << ar.size() << "\n";
}

----------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 5> ar{12, 34, 78, 90, 3};
	
	for(auto i : ar){  // range based for loop kullanabilirim
	
	}
}

----------------------------------------------- 

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar)
{
	for(const auto& x : ar)  // range based for loop
		std::cout << x << ' ';
	
	std::cout << '\n';
}

int main()
{
	using namespace std;
	
	array<int, 5> ar{ 12, 34, 78, 90, 3};
	
	print(ar);
	sort(ar.begin(), ar.end());
	print(ar);
	reverse(ar.begin(), ar.end());
	print(ar);
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	const array<int, 5> ar{ 12, 34, 78, 90, 3};
	
	auto x = ar[4];
	ar[4] = 6; // [] operator fonk. geri dönüş değeri const& 
	// dolayısıyla const bir array nesnesinin elemanına [] operatörü
	ile eriştiğimde derleyici açısından const bir nesne elde etmiş oluyorum.
	Dolayısıyla onu set etmem sentax hatası
	
}

*----------------------------------------------------------------------------------------------------- 

iki tane [] operatör fonk. var. 
1) const
2) non-const

Dolayısıyla const olamayan bir nesne için [] çağırsam const olmayan 
fonk çağırılır, const olan bir nesne için [] çağırsam const olan fonk. 
çağırılır. 

front
back fonk. için de böyledir.

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	const array<int, 5> ar{ 12, 34, 78, 90, 3};
	
	ar.front()++;  // sentax hatası
	ar.back()--;  // sentax hatası
	
	int x = ar.front();  // geçerli !!!
	
	print(ar);
}

*----------------------------------------------------------------------------------------------------- 

map'in at fonk. da eğer anahtar yoksa exception yoksa exception throw ediyor. 

--------------------------------------------------

burada tanımsız davranış, exception throw etmez !!!

int main()
{
	using namespace std;

	array<int, 5> ar{ 12, 34, 78, 90, 3};
	
	try{
		auto x = ar[5];
	}
	catch(const std::exception& ex){
		std::cout << "exception caught: " << ex.what() << '\n',
	}
	
	print(ar);
}

---------------------------------------------------------------- 

// exception throw eder

int main()
{
	using namespace std;

	array<int, 5> ar{ 12, 34, 78, 90, 3};
	
	try{
		auto x = ar.at(5);
	}
	catch(const std::exception& ex){
		std::cout << "exception caught: " << ex.what() << '\n',
	}
	
	print(ar);
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;

	array ar{ 12, 34, 78, 90, 3}; // geçerli, CTAD
	
	array<int> ar{ 12, 34, 78, 90, 3}; // geçerli değil !!
	
	array<> ar{ 12, 34, 78, 90, 3}; // geçerli değil !!
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<string, 4> ar{"ali", "can", "ece"};  
	// dördüncü elemanı default const. ile hayata getirilir, empty string olur.
	
	print(ar);
	
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<array<int, 3>, 4> ax;  // geçerli 
	
}

*----------------------------------------------------------------------------------------------------- 

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	array<array<int, 3>, 4> ax{ {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} };  // hatalı 
	
	array<artype, 4> ax{ {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} };  // hatalı 
	
	array<array<int, 3>, 4> ax{ { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} } };  // ok, why ??
}

*----------------------------------------------------------------------------------------------------- 

template<typename T, std::size_t N>
void print(const std::array<T, N>& ar)
{
	for(const auto& x : ar)  // range based for loop
		std::cout << x << ' ';   // sentax hatası, array'i böyle yazdıramam
	
	std::cout << '\n';
}

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	array<artype, 4> ax{ { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} } }; 
	
	print(ax);  // diziyi yazdırır, ok
}


----------------------------------------- 

template<typename T, std::size_t N>
std::ostream& operator<<(std::ostream& os, const std::array<T, N>& ar)
{
	os << '{';
	for(const auto& x : ar){
		os << x << ',';  
	}
	
	return os << "} ";
}

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	array<artype, 4> ax{ { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} } }; 
	
	cout << ax;  // legal
	
}

------------------------------------------------------- 

fazladan virgülü istemeseydim :

template<typename T, std::size_t N>
std::ostream& operator<<(std::ostream& os, const std::array<T, N>& ar)
{
	os << ' { ';
	for(size_t i = 0; i < ar.size() -1; ++i){
		os << ar[i] << ' , ';  
	}
	os << ar.back() << "\n";
	
	return os << " } ";
}

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	array<artype, 4> ax{ { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {2, 2, 2} } }; 
	
	cout << ax;  // legal
}

*----------------------------------------------------------------------------------------------------- 

fill : bütün elemanlarını aynı değerle doldurmak

template<typename T, std::size_t N>
std::ostream& operator<<(std::ostream& os, const std::array<T, N>& ar)
{
	os << '{';
	for(size_t i = 0; i < ar.size() - 1; ++i){
		os << ar[i] << ' , ';  
	}
	
	return os << ar.back() << "}";
}

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	array<int, 5> ar;
	
	ar.fill(3);  // aynı elemanla doldurmak isterseniz çağırabilirsiniz
	
	cout << ar << "\n";
}

*----------------------------------------------------------------------------------------------------- 

template<typename T, std::size_t N>
std::ostream& operator<<(std::ostream& os, const std::array<T, N>& ar)
{
	os << '{';
	for(size_t i = 0; i < ar.size() - 1; ++i){
		os << ar[i] << ' , ';  
	}
	
	return os << ar.back() << "}";
}

using artype = std::array<int, 3>;

int main()
{
	using namespace std;
	
	vector<array<int, 5>> myvec;
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 5> ar{1, 2, 3, 4, 5};
	
	ar.data();
	&ar[0];
	&*ar.begin();  // hepsi aynı
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	array<int, 0> ar;
	
	cout << boolalpha << (ar.data() == nullptr);
}

*----------------------------------------------------------------------------------------------------- 

---------------------------------------------------------------------
----------------- container adaptors ----------------------
---------------------------------------------------------------------- 

bunlar container değil, bunun sonucu begin, end fonk. yok, range based for loop ile dolaşamazsınız. Bunların elemanı container. Data memeber olarak container alıyorlar
Amaçları container olarak kullanılmak değil.

// stack
// queue
// priority_queue

so-called containers

*----------------------------------------------------------------------------------------------------- 

https://en.cppreference.com/w/cpp/header/flat_map

C++23 ile yeni bir container eklendi

*----------------------------------------------------------------------------------------------------- 

vector'ün kendi interface'inin tamamını vermiyorum client'larıma, daha 
kısıtlı bir arayüz veriyorum. 

template<typename T>
class Stack {
public:
	void push(const T& val)
	{
		mc.push_back(val);
	}
	
	void pop()
	{
		mc.pop_back();
	}
	
	bool empty()const
	{
		return mc.empty();
	}
	
	std::size_t size()const()
	{
		return mc.size();
	}
	
	T& top()
	{
		return mc.back();
	}
	
protected:
	std::vector<T> mc;
};

*----------------------------------------------------------------------------------------------------- 

üst örnekte container veri elamanı olarak vector kullandım. Orjinalinde
container'in ne olacağı kararını da client'a bırakıyor. Yani template yapılmış.

container adaptörü denmesinin nedeni bu, bir container'i adapte ediyor !!!

*----------------------------------------------------------------------------------------------------- 

orjinali :

template<typename T, typename C = std::deque<T>>
class stack{


}

*----------------------------------------------------------------------------------------------------- 

#include <stack>
#include <vector>

int main()
{
	stack<int, vector<int>> mystack;  // default vector değil deque
	stack<int, list<int>> mystack2;  // 
	
}

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	stack<Date> mystack;
	
	mystack.emplace(1, 4, 1987);
	mystack.emplace(1, 5, 1990);
	mystack.emplace(1, 5, 1995);
	mystack.emplace(7, 9, 2022);
	
	while(!mystack.empty()){
		cout << mystack.top() << "\n";  // ref. döndürür 
		mystack.pop();
		(void)getchar();
	}
	
}

*----------------------------------------------------------------------------------------------------- 

pop() fonks. geri dönüş değeri yok 

*----------------------------------------------------------------------------------------------------- 

int main()
{
	using namespace std;
	
	stack<Date> mystack;
	
	for(int i = 0; i < 10; ++i){
		auto rdate = Date::random();
		cout << rdate << "\n";
		mystack.push(rdate);
	}
	
	while(!mystack.empty()){
		std::cout << mystack.top();
		(void)getchar();
		mystack.pop();
	}
	
}

*----------------------------------------------------------------------------------------------------- 

mülakat sorusu : parantez matching algoritması

bir string var, <<] 
açılan bütün parantezler kapanıyorsa uyumlu aksi takdirde uyumsuz olduğunu bul.
<   >
(   )
{   }
[   ]

int main()
{
	string str;
	
	std::cout << "bir yazi girin : ";
	getline(cin, str);
}

------------------------------------------- 

(([ali]<veli>{hasan}))

açılan parantez ise stack'e push ediyor
(([]   // pop
((<>  // pop
(({}   // pop


