
İçerik:

global fonk. şablonları



özet:


*-----------------------------------------------------------------------------------------------------    

C++'da üç reference türü var
1) lvalue ref.
2) rvalue ref.
3)forwarding ref.


forwarding_reference : sağ taraf referansı değil,  ayrı bir reference kategorisi
// cppreference doğru değil
ister lvalue, rvalue ikisine de bağlanabiliyor. Hiç bir ifadeyi reddetmez

hem rvalue ref. hem forwarding ref. bildiriminde "&&" kullanılır.

*-----------------------------------------------------------------------------------------------------    

mülakat sorusu : hangisi forwarding ref. hangisi değil ?

int main()
{
	int y{};
	
	auto&& x = y;  // forwarding ref., çünkü burada tür çıkarımı var
}

------------------------------   

void func(int&& x)  // rvalue ref.
{

}

------------------------------   

template <typename T>
void func(T&& x)  // forwarding ref.
{
	
}

int main()
{
	int x = 5;
	func(x);  // ok
}

------------------------------   

template <typename T>
void func(const T&& x)  // forwarding ref. değil, veya volatile
{
	
}

int main()
{
	int x = 5;
	func(x);  // hata, forwarding ref. olsa herşeyi kabul eder !!!
}

--------------------------------    

#include <vector>

template<typename T>
void func(std::vector<T>&& x);  // forwarding ref. değil

--------------------------------    

#include <vector>

template<typename T>
void func(T&x, typename T::value_type &&y);  // ikinci parametre forwarding ref. değil

kural :template parametresine bağlı bir nested type && ile kullanılırsa asla 
forwarding ref. değil  !!!

--------------------------------    

template<typename T>
class Necco{

public:
	void func(T&&); // forwarding ref. değil, neden ? T int ise bu int&& olacak, dolayısıyla
	rvalue ref.
};

--------------------------------    

template<typename T>
class Necco{

public:
	template<typename U>
	void func(U &&);
};

--------------------------------    

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	svec.push_back();  // push_back'in parametresi forwarding ref. mi ? değil, std::string &&
	// aslında func. overloading var
}


template <typename T>
class Vector{

public:
	void push_back(T&&);  // forwarding ref. değil 
	void push_back(const T&);  // const Lvalue, function overload
	// iki overload'u var !!!
	// neden ? lvalue gelirse bu, sağ taraf gelirse o da move yapacak
	
	template<typename ...Args>
	void emplace_back(Args && ...args);  // forward ref.
	
};

----------------------------------------    

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	svec.emplace_back(10,  'A');  // forwarding ref.
}

*-----------------------------------------------------------------------------------------------------    

kaldığımız yerden devam :

 // global fonk. şablonları
next: kopyalama semantiği iteratöre alıyor, n pozisyon sonraki  konumu geri döndürür
yani parametresi tür, referans değil
prev : kopyalama semantiği iteratöre alıyor, n pozisyon önceki  konumu geri döndürür
yani parametresi tür, referans değil

*-----------------------------------------------------------------------------------------------------    

int main()
{
	using namespace std;

	list mylist{1, 3, 5, 7, 13};
	auto iter = mylist.begin();
	
	next(iter, 3);  // bu iteratörü arttırmıyor, konum döndürür
	
	next(iter); // default argümanı 1, bir sonrakini verir.
}

--------------------------------------------------    

int main()
{
	using namespace std;

	list mylist{1, 3, 5, 7, 13};
	auto iter = mylist.begin();
	advance(iter, 4);  // parametresi referans !!!
	
	prev(iter, 2);
	prev(iter);  //// default argümanı 1, bir öncekini verir.
}

*-----------------------------------------------------------------------------------------------------    

int main()
{
	using namespace std;
	
	// myvec.begin + 3;  // veya
	next(myvec.begin(), 3);  // generik'te bunu kullan toplamayı kullanma
}

*-----------------------------------------------------------------------------------------------------    

iter_swap : iki tane iteratör ister, o konumdaki nesneleri takas eder

int main()
{
	using namespace std;
	vector<string> svec{ "emre", "deniz", "fatma"};
	list<string> slist{ "tayfun", "aysenur", "zeliha"};
	
	iter_swap(svec.begin(), prev(slist.end()));
	print(svec);
	print(slist);
}

*-----------------------------------------------------------------------------------------------------    

#include <algorithm>

int main()
{
	using namespace std;
	vector<string> svec;
	rfill(svec, 10, rname);
	print(svec);

	vector<string> destvec;
	
	// transform(svec.begin(), svec.end(), destvec.begin());  // son parametre sentax hatası çünkü vector boş,  // birinci ikinci parametre kaynak range, üçüncü parametre hedef range'imn başlangıcı, son parametre callable

	 transform(svec.begin(), svec.end(), back_inserter(destvec), [](const string& s){
	return s.substr(1)});
	
	print(destvec);
}

*-----------------------------------------------------------------------------------------------------    

#include <algorithm>

int main()
{
	using namespace std;
	
	vector<string> svec;
	
	generate_n(svec.begin())  // tanımsız davraniş
	
	generate_n(back_inserter(svec), 100, []{return rname() + ' ' + rfname();}
	
	for(const auto&s : svec)
		cout << s << '\n';
}

*-----------------------------------------------------------------------------------------------------    

stream iteratörü :

yazma amaçlı bir algoritmayı bir çıkış akımına insert edecek duruma dönüştürebilirsiniz, bu işi yapan stream iteratörü denir.

*-----------------------------------------------------------------------------------------------------    

// Copy'nin üçüncü parametresine öyle bir argüman göndermeliyim ki çıkış akımına *beg'i insert etsin

template <typename InIter, typename OutIter>
OutIter Copy(InIter beg, InIter end, OutIter destbeg)  // bizim yazdığımız copy fonk.
{
	while(beg != end){
		*destbeg++ = *beg++;
	}
	return destbeg;
}

template <typename T>
class OstreamIterator{
public:
	OstreamIterator(ostream& os, const char* p = " "): m_os(os), m_sep(p){}
	
	OstreamIterator& operator++()
	{
		return *this;
	}
	
	OstreamIterator& operator++(int)  //
	{
		return *this;
	}
	
	OstreamIterator& operator=(const T& tval)
	{
		m_os << t_val << m_sep;
		return *this;
	}
	
private:
	ostream& m_os;
	const char* m_sep;
};

int main()
{
	using namespace std;
	
	vector<string> svec{"eray", "ilayda", "deniz", "emre", "necati", "yasin", "fuat", "albert" };
	
	Copy(svec.begin(), svec.end, OstreamIterator<string>{cout, "\n"} );
}

*-----------------------------------------------------------------------------------------------------    

int main()
{
	using namespace std;
	
	vector<Data> dvec;
	generate_n(back_inserter(dvec), 10, Date::random);
	
	copy(dvec.begin(), dvec.end(), ostream_iterator<Date>{cout, "\n"});
	// bu kodun legal olması için Date sınıfının bir insertor'u olmalı
	// date.h'ın içinde
}

*-----------------------------------------------------------------------------------------------------    

copy_if

int main()
{
	using namespace std;
	
	vector<Data> dvec;
	generate_n(back_inserter(dvec), 10000, Date::random);
	
	cout << "ayin kacinci gunu : ";
	int m_day;
	cin >> m_day;
	
	ofstream ofs{    "out.txt"   };
	if(!ofs){
		cerr << "dosya olusturulamadi\n";
		return 1;
	}
	
	copy_if(begin(dvec), end(dvec), ostream_iterator<Date>{ofs, "\n"}, [mday](const Date& d) {return d.month_day() == mday; });
}

*-----------------------------------------------------------------------------------------------------    

sequence containers : ekleme ve silme işlemlerini belirli konum üzerinden yapıyorlar. Elemanların sırası var.
	vector
	deque
	list
	forward_list
	array
	string

associative containers : ekleme değerle yapılır, bu değeri ekle,
nereye ekleneceğini kendisi tespit eder. İkili arama ağacı var.
	set
	multi_set
	map
	multi_map

unordered associative containers :
	unordered_set
	unordered_multi_set
	unordered_map
	unordered_multi_map

---------------------------    

öyle üye fonksiyonlar var ki neredeyse bütün container çeşitlerinde var

empty
size
clear

bool empty()const;
void clear();

array sınıfı C dizilerini sarmalayan bir sınıf olduğu için bir diziden
eleman silemezsin, clear fonksiyonu yok !!!

forward_list'in  size üye fonk. yok.

*-----------------------------------------------------------------------------------------------------    

öyle bir fonk. ki sadece sequence container'larda var

front

*-----------------------------------------------------------------------------------------------------    

container üstünde işlem yapma yolu:

1. yol :
con.func() : üye fonk. çağırma

2. yol : algoritmaya çağrı
algo(???)

hangisi daha iyi bir yol ?
cevap : üye fonk. çağırma
neden ? 

mylist.reverse() : veriyi swap etmek yerine pointer'ları swap eder
reverse(mylist.begin(), mylist.end())  : iteratör konumundaki öğeleri takas eder, daha maliyetli olabilir.

threat konusunda algoritma seçilebilir !!!

*-----------------------------------------------------------------------------------------------------    

container'lar öğeleri bir arada tutan kaplar. Container'ların üye fonk. içinde bizi en çok ilgilendiren grup container'a öğe ekleyen insert işlemi yapan fonksiyonlar. 


*-----------------------------------------------------------------------------------------------------    

bir öğeyi container'a koyarken taşıma semantiğinden faydalanabiliyoruz. Yani container'a koymakta kaynak olan nesnenin
kaynağını çalarak sınıfın move const. çağrı yaparak container'a ekleme yapabiliyoruz.  

*-----------------------------------------------------------------------------------------------------    

modern C++ ile

class Vector{

public:
	void push_back(const T&);
	void push_back(T&&);
}

fighter_vec.push_back(myfighter); // lvalue expr. gönderirsen copy const.
fighter_vec.push_back(myfighter); // rvalue expr. gönderirsem move const. çağırılır

bazı sınıfların copy const. olmadığını move const. var.
örneğin : unique_ptr sınıfı

copy const.'ı olmayan move constable olan sınıfları da container'lara eklemek mümkün.

*-----------------------------------------------------------------------------------------------------    

modern C++ ile

emplace_back eklendi
push_front    emplace_front

insert

*-----------------------------------------------------------------------------------------------------    

int main()
{
	using namespace std;
	
	vector<Date> dvec;
	Date mydate{ 23, 7, 1998};
	
	dvec.push_back(mydate);
	dvec.emplace(23, 7, 1965);
}

Ne oluyor ?
push_back fonksiyonun const T& parametreli overload'i çağırılır.
Bu overload vector'un sağladığı bellek alanında ilgili adresi this pointer'ı olarak kullanıp sınıfın copy const.'ına çağrı yapar. 

emplace_back aldığı argümanları perfect_forwarding mekanizmasından faydalanarak sınıfın const.'ına forward ediyor. Ne bir copy ne bir move var. Vector'ün sağladığı bellek alanında nesneyi oluşturur. 

*-----------------------------------------------------------------------------------------------------    

STL'de container'a ekleme yapmanın 3 yolu var

1) move
2) copy
3) perfect_forwarding (emplace fonksiyonlarında)


emplace'i çok iyi öğren !!!

*-----------------------------------------------------------------------------------------------------    

int main()
{
	using namespace std;
	
	Date mydate{15, 8, 2022};
	
	vector<Date> dvec;
	
	dvec.push_back(mydate);
	
}

	// soru : dvec container'ına mydate nesnesinin kendisini mi koymuş oluyorum ? cevap: hayır
	// container'ların hiçbiri referans semantiği ile çalışmıyor

----------------------------------------    

	eğer bir container'a öğe ekliyorsanız :
	a) insert fonk. ile al bunun copyasını ekle
	b ) al bunun kaynağını çal container'a ekle (taşıma semantiği)
	c) al bu argümanları kullanarak öğeyi kendin const. et diyeceksiniz
	ama bir öğenin kendisini container'da tutmak doğrudan mümkün değil 
	
----------------------------------------    

	container'da referans tutamazsın :

int main()
{
	using namespace std;

	vector<Date&> myvec;  // sentax hatası
}

*-----------------------------------------------------------------------------------------------------    

bir öğenin kendisini container'da tutmak doğrudan mümkün değil 
dolaylı mümkün , bunu yapmanın birkaç yolu var.

1. yol : pointer tutma

vector<Fighter*> 

2. yol : smart pointer tutma

vector<unique_ptr<Fighter>> 

3. yol : reference wrapper

vector<reference_wrapper<>>

--------------------------------------------------    

vector'lerin silme işlemi yapan fonk. var
her silme işlemi için destructor'ı çağırır

algoritmaların parametreleri range dolayısıyla bir algoritma container'ın kendisini
argüman olarak almıyor, range'ini argüman olarak alıyor, yani iki tane iteratör alır, 
bir algoritma container'a ekleme ve silme yapamaz. Neden ? container'in üye fonk.
çağırılmalı, 


int main()
{
	using namespace std;
	
	{
		vector<string> svec{"eray", "oguzhan", "dilara", "zeynep"};
	
	} // svec destructor'ı çağırılır, container'da tutulan her bir öğe için destructor çağırılır
	
}

*-----------------------------------------------------------------------------------------------------    

STL'in en sık kullanılan container'ı olan vector containeri

----------------------------------------------------------------------
------------------------  VECTOR ---------------------------------    
----------------------------------------------------------------------

vector ile string sınıfı da ikisi de dinamik veri yapısı
string yazı tutmak amaçlı özelleştirilmiş dinamik dizi containeri
vector genel bir container

veri yapıları ihtiyacının en az %75'i vector ile karşılanır
 eğer bir container'a ihtiyacınız varsa default seçiminiz vector olmalı

tipik hatalardan biri
teorik bilgi ile pratiği bilgiyi her zaman birbirine uyumlu zannetmek

vector'e bağlı listeye göre daha hızlı olabilir

*-----------------------------------------------------------------------------------------------------    

dinamik dizide öğeler :
1) allocate edilmiş bir bellek alanında contigus (ardışık)
olarak tutulur. Konumunu bildiğiniz öğeye veri ne kadar büyük olursa olsun
constant time'da erişebiliyorsunuz
2) ekleme, silme işlemi sondan yapıldığında yine constant time
3) ekleme, silme işlemi ortadan yapıldığında karmaşıklık linear complexity

size'i tutulmakta olan öğe sayısı 200
capacity reallocation olmadan tutabileceği öğe sayısı 256 olabilir
reallocation yapılırsa invalidates pointers and references
dolayısıyla en tipik hata reallocate edilirse eski konumlar dangling hale gelir
capacity size'e eşitse reallocate'de yerler değişir ve maaliyeti yüksek !!

*-----------------------------------------------------------------------------------------------------    

vector nasıl bir sınıf şablonu ?

 // T dizide tutulacak öğenin türü, A allocator türü 

template<typename T, typename A = std::allocator<T>> 
class Vector{


}

Vector<int, allocator<int>>
Vector<Fighter, arena_allocator<Fighter>>

*-----------------------------------------------------------------------------------------------------    

// container'ların iterator veren fonksiyonları :
begin, end, rbegin, rend, cbegin, cend, crbegin, crend

*-----------------------------------------------------------------------------------------------------    

[] ve at fonksiyonu aynı işi yapar
farkı [] kendisine geçilen index argümanı geçersiz olduğunda exception throw etmez, tanımsız davranış
ama at fonk. outofrange  türünden exception throw eder.

*-----------------------------------------------------------------------------------------------------    

back fonk. : container'daki son öğeye erişir,
capacity fonk. : string'deki gibi capacity verir,
clear fonk.   : container'ı boşaltır
data fonk.  :  allocate edilmiş bellek bloğunun adresini döndürür
empty fonk.  :  container boş mu dolu mu bool döndürür
erase fonk.  :  iteratör verince o iteratör konumundaki öğeyi siler
pop_back fonk.  :  vectordeki son öğeyi siler
push_back fonk.  :  vectore sondan ekleme yapar
reserve fonk.   :  capacity'i rezerve eder. 
resize fonk.  :  büyütme ve küçültme için kullanılır.
shrink_to_fit fonk.  :  capacity'i size'a büzer, container'da 300 bin öğe tutuluyor, bütün öğeleri silseniz de capacity 400 bin
swap fonk.  :  iki container'i swap eder, pointer'ları swap eder, yoksa atama ile swap yaparsak copy const. ile biryerden biryere kopyalar bunu tercih etme !!

*-----------------------------------------------------------------------------------------------------    

ilki ve sonu bırakıp diğer elemanları silme

#include <vector>

using namespace std;

int main()
{
	vector<int> ivec(100);
	
	ivec.erase(next(ivec.begin()), prev(ivec.end()));  // veya
	ivec.erase(ivec.begin()+ 1, ivec.end()-1);  
}

*-----------------------------------------------------------------------------------------------------    

#include <vector>

using namespace std;

int main()
{
	vector<int> ivec(100);
	
	ivec.insert
}

*-----------------------------------------------------------------------------------------------------    


