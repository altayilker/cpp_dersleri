
İçerik:

lambda expression: (en önemli araçlardan biri !!!)
mutable : (eskiden öğrendiğimiz değil) 
stateless lambda (durum bilgisine sahip olmayan lambda)
GENERALIZED LAMBDA EXPRESSIONS
capture close yöntemi : kullanacağınız yerel değişkenleri [ ] içine yazmak
copy capture 
reference capture 
capture all by copy
capture all by reference
dangling reference :  (anlamadım !!!!)


özet:

*-----------------------------------------------------------------------------------------------------    

lambda expression (lambda ifadeleri)

1) derleyici ifadenin bulunduğu yerde bir sınıf tanımlar. Bu sınıfı kendince isim verir
2) tanımladığı sınıfa bir üye operator() işlevi yazar
3) koddaki lambda ifadesini oluşturduğu sınıf türünden 
bir geçici nesneye(temporary object) dönüştürür.
İleride göreceğiz bir local class oluşturur.

*-----------------------------------------------------------------------------------------------------    

// closure type: 
// closure object : lambda ifadesi karşılığı oluşturulan object'ten bahsediyor
// lambda function : ama necati hoca lambda expression diyor


*-----------------------------------------------------------------------------------------------------    

[ ]  : lambda introducer, lambda ifadesinin olmazsa olmazı 

<typename T> : C++ 20 ile eklendi

( ) : fonksiyon çağrı operatorünü overload eden parametre değişkenleri yazılır

{ } : kodlar


*-----------------------------------------------------------------------------------------------------    

int main()
{
	[] () {} () ;  // [] () {} lambda ifadesi, geçici nesneye dönüştürdü, sonr geçici nesneyi fonksiyon 
	çağrı operatörünün () operandı yaptığımız için fonks.'u çağırmış olduk
	
	[] {} () ; // fonksiyonun parametre değişkeni olmasa da legal,
}

*-----------------------------------------------------------------------------------------------------    

int main()
{
	[] () { std::cout << "ali" << "\n"; } () ;
}

*-----------------------------------------------------------------------------------------------------    

fonksiyonun geri dönüş  türü nasıl anlaşılır ?
deduction devreye girer.

int main()
{
	[] () {
		return 1;  // deduction ile int olduğunu anlar
	} 
}

-------------------------

int main()
{
	[] () {
		  // geri dönüş türünün deduction ile void olduğunu anlar
	} 
}

*-----------------------------------------------------------------------------------------------------    

int main()
{
	auto f = [] (int a) {return a*a;}; 
	// sağ taraf lambda ifadesi, yani geçici nesne, 
	// f değişkeninin türü derleyicinin oluşturduğu sınıf türü
	// burada çağırılan bir fonksiyon yok
	
	std::cout << typeid(f).name() << "\n";
	
	std::cout << f(12) << "\n";  // fonksiyon çağırıldı
}

*-----------------------------------------------------------------------------------------------------    

sonumuz bu ben bir derleyiciyim

i am a compiler :)

*-----------------------------------------------------------------------------------------------------    

class xyzm13t_{
public:
	int operator()(int a)const
	{
		return a * a;
	}
};

int main()
{
	auto f = [ ] (int a) {return a*a; }; 
	// auto f = xyzm13t_{ };  // geçici nesneye dönüştürür.
	
	std::cout << f(12) << "\n";
}

*-----------------------------------------------------------------------------------------------------    

class xyzm13t_{
public:
	int operator()(int a)const
	{
		mx = 56;
		return a * a;
	}
	
	int mx;
};

int main()
{
	auto f = [ ] (int a) {return a*a; };  // sentax hatası 
	// auto f = xyzm13t_{ };  // geçici nesneye dönüştürür.
	
	std::cout << f(12) << "\n";
}

*-----------------------------------------------------------------------------------------------------    

class xyzm13t_{
public:
	int operator()(int a)const
	{
		return a * a;
	}
};

int main()
{
	auto f = [ ] (int a) {return a*a; }; 
	// auto f = xyzm13t_{ };  // geçici nesneye dönüştürür.
	
	std::cout << f(12) << "\n";
}

*-----------------------------------------------------------------------------------------------------    

mutable : (eskiden öğrendiğimiz değil) 
yazacağın üye fonksiyonun  const. üye fonk. olmasını istemiyoruz

int main()
{
	auto f = [ ] (int a)mutable{return a*a; }; 
	
	// yazacağın üye fonksiyonun  const. üye fonk. olmasını istemiyoruz
	
	std::cout << f(34) << "\n";
	std::cout << f(56) << "\n";
}

*-----------------------------------------------------------------------------------------------------    

// stateless lambda (durum bilgisine sahip olmayan lambda)

int main()
{
	auto a = [ ](int a){return a * a;}(99);  // a : int, fonk. geri dönüş değeri ilk değeri
	
	auto x = [ ](int a){return a * a;};  // x'in türü derleyicini oluşturduğu closure type
	auto y = [ ](int a){return a * a;};   // x ve y aynı sınıf türünden mi ? farklı
}

*-----------------------------------------------------------------------------------------------------    

#include <type_traits>

int main()
{
	auto x = [ ](int a){return a * a;};  
	auto y = [ ](int a){return a * a;};
	
	is_same_v<decltype(x), decltype(y)> ;  // false, aynı türden değil
}

*-----------------------------------------------------------------------------------------------------    

int main()
{
	auto f = [](int x){
		if(x > 10)
			return 10;
			
		return 4.5;
	};
}

geri dönüş türlerinin türü farklıysa derleyici type deduction yapamaz. Hatalı

----------------------------------

int main()
{
	auto f = [](int x)->double{  // trailing return type, tür çıkarımı devreden çıkar
		if(x > 10)
			return 10;
			
		return 4.5;
	};
}

--------------------------------------------------    

int main()
{
	auto f = [](int x)-> double{  // trailing return type, tür çıkarımı devreden çıkar
		return x * x;
	};
}

*-----------------------------------------------------------------------------------------------------    

noexcept specifier : no throw garantisi vermiş olursunuz

*-----------------------------------------------------------------------------------------------------   

->int
mutable
noexcept
constexpr

bu sözcüklerin hepsi bir lambda ifadesinde bir arada olabilir

*-----------------------------------------------------------------------------------------------------    

class abcxyz{  // geçici nesne normalde böyle yazılırdı
public:
	int operator()(int )
};

int main()
{
	auto f = [](int x){
		return x + x;
	};
}

-------------------------------------

GENERALIZED LAMBDA EXPRESSIONS

eğer parametre değişkenlerinden bir veya birden fazlası için auto anahtar sözcüğü ile 
parametreyi tanımlarsanız, aslında closure type olarak oluşturulan sınıfın  
fonksiyon çağrı operator fonksiyonunun member template olarak yazılmasını talep ediyorsunuz demek


auto : fonksiyon çağrı operatör fonk.'nun template olmasını istiyorsanız yazılır

class abcxyz{  //   ( )'ın içinde auto kullanıldıktan sonra
public:
	template<typename T>
	int operator()(T x)const
};

int main()
{
	auto f = [](auto x){  // (auto x) : fonksiyon çağrı operatör fonk.'nun template olmasını istiyorsanız yazılır
		return x + x;
	};
	
	std::cout << f(12) <<  "\n";
	std::cout << f(1.2) <<  "\n";
	
	string s{"ali"};
	std::cout << f(s) <<  "\n";
}

*-----------------------------------------------------------------------------------------------------    

şimdiye kadar yazdığımız lambda ifadeleri stateless lambda ifadeleri
fakat derleyicinin yazdığı sınıfın veri elemanları olabilir. Derleyiciye
veri elemanlarına sahip bir sınıf yazmasını isteyebilirim. []'nın içine birşey
yazmam gerekir.

*-----------------------------------------------------------------------------------------------------     

int x = 5;
int y = 12;

int main()
{
	auto f = [](int a){
		return a*(x+y) ; 
	};
}

derleyicinde sentax hatası olmadı. Global değişkenleri lambda ifadelerinin içinde kullanabilirim:

-----------------------------------------------------------     

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [](int a){
		return a*(x+y) ;   // hata, x ve y lambda içinde kullanılamaz !!!
	};
}

-----------------------------------------------------------     

int main()
{
	static int x = 5;
	static int y = 12;
	
	auto f = [ ](int a){
		return a*(x+y) ;   // ok, global veya yerel olmasından değil static olmasından geliyor. Otomatik ömürlü değişkenleri
		kullanamam
	};
}

-----------------------------------------------------------     

// derleyiciye böyle bir kod yazdırmak istiyorum, buna capture close denir
class abc_ytr_ {  
public:
	abc_ytr_(int a, int b) : x(a), y(b) {}
	auto operator()(int a)const
	{
		return a* (x + y);
	}
private:
	int x, y;  // non-static veri elemanları oldu
};

int main()
{
	int x = 5;
	int y = 12;
	
	// auto f = [ ](int a){
	//    return a*(x+y) ;   
	// };
}

-------------------------------------------------     

capture close yöntemi : kullanacağınız yerel değişkenleri [ ] içine yazmak

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x, y](int a){  // üstteki x ve y'yi kullanmış olmuyorum, derleyicinin oluşturduğu veri elemanlarını kullanmış olurum
		return a*(x+y) ;   
	};
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	int x = 5;
	
	auto f = [x](int a){ 
		++x ;   // sentax hatası, üye fonksiyon const üye fonksiyon, sınıfın veri elemanını değiştiremezsin 
		return 1;
	};
}

--------------------------------------------------------     

int main()
{
	int x = 5;
	
	auto f = [x](int a)mutable{  // burdaki mutable const. üye fonksiyon olmasın demek. const.'luğu kaldırır.
		++x ;   
		return 1;
	};
}

------------------------------------------------------------------     

int main()
{
	int x = 5;
	
	auto f = [x](int a)mutable{  
		++x ;   
	};
	
	std::cout << "x = " << x << "\n";  // x'in değeri değişmedi çünkü fonksiyon çağrılmadı !!!
}

---------------------------------------------------------------     

int main()
{
	int x = 5;
	
	auto f = [x](int a)mutable{    // x ilk değerini almış sınıfın veri elemanı
		++x ;   
	};
	
	f();
	std::cout << "x = " << x << "\n";  // x değişmedi çünkü bu x local x'tir
}

*-----------------------------------------------------------------------------------------------------     

class abc_ytr_ {  
public:
	abc_ytr_(int a) : x(a) {}
	auto operator()(int a)const
	{
		++x;  // sentax hatası, const üye fonk. olduğu için, mutable kullan
		return a* x;
	}
private:
	int x;  
};

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a){
		return a*x;   
	};
}

-----------------------------------------------------------     

argüman olarak gönderilen değişkeni bir arttırmak istesem nasıl yapılır ?

class abc_ytr_ {  
public:
	abc_ytr_(int& a) : x(a) {}
	auto operator()(int a)
	{
		++x; 
	}
private:
	int& x;  
};

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a){
		return a*x;   
	};
}

-----------------------------------------------------------     

class neco{
public:
	void func()const
	{
		*ptr = 56;
	}
private:
	int* ptr;
};

sentax hatası olmaz
kime değer atasaydım sentax hatası olurdu ?
ptr'ye değer atasaydım sentax hatası olurdu, pointer'a yeni değer atamıyorum ki
sınıfın veri elemanını değiştirmiyorum ki 

--------------------------------------------     

sınıfın veri elemanının pointer olması durumunda const üye fonksiyon pointer'a yeni bir değer atayamaz.
Ama pointee'ye değer atayabilir.

int g{};

class neco{
public:
	void func()const  // sentax hatası, const. üye fonksiyon pointer'a değer atayamaz ama pointee'ye atayabilir
	{
		ptr = &g;
	}
private:
	int* ptr;
};

-------------------------------------------------------     

burayı anlamadım ?????

int g{};

class neco{
public:
	void func()const  // sentax hatası yok, referans demek pointer demek
	{
		ir = g;
	}
private:
	int& ir;  // bu referansın yerine geçtiği nesneyi set edebiliriz.
}

-------------------------------------------------------------------    

const anahtar sözcüğünü koysam sentax hatası olur mu ? olmaz

class abc_ytr_ {  
public:
	abc_ytr_(int& a) : x(a) {}
	auto operator()(int a)const
	{
		++x; 
	}
private:
	int& x;  // bu referansın yerine geçtiği nesneyi set edebiliriz, bunun pointer semantiğinden farkı yok !!!
};

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a){
		return a*x;   
	};
}

*-----------------------------------------------------------------------------------------------------     

 copy capture :

// [x] ne demek ? copy capture, derleyici senin bir sınıf yazmanı, yazdığın sınıfa bir veri elemanı koymanı ve 
bu veri elemanını da yazacağın const. ile ilk değer vermeni istiyorum

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a){  
		return a*x;   
	};
}

-------------------------------------------------------------     

reference capture:

// [&x] ne demek ? reference capture, derleyici senin bir sınıf yazmanı, yazdığın sınıfa bir referans veri elemanı koymanı ve 
bu referans veri elemanını da yazacağın const. ile x ile ilk değer vermeni istiyorum. Yani ilk değer vermek için yerel değişken 
x'i kullanacağız. Bu da şu demek, lambda bloğu içinde yerel değişkeni değiştirecekseniz, onu ref. semantiği ile capture etmeniz
gerekiyor.

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [&x](int a){  
		return a*x;   
	};
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a){  
		x *= a;   // sentax hatası, çünkü const. üye fonk. sınıfın veri elemanını değiştiremez
	};
}

-----------------------------------------------------------     

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [x](int a)mutable{    // mutable yaparsak geçerli
		x *= a;  
	};
	
	std::cout << "x = " << x << "\n";  // x = 5;
	f(10);
	
	std::cout << "x = " << x << "\n"; // x = 5;  x değişmez 
}

-------------------------------------------     

reference capture ile :

int main()
{
	int x = 5;
	int y = 12;
	
	auto f = [&x](int a){    
		x *= a;  
	};
	
	std::cout << "x = " << x << "\n";  // x = 5;
	f(10);
	
	std::cout << "x = " << x << "\n"; // x = 5;  x değişmez 
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	string str{"deniz"};
	
	auto f = [str](){    
		str.append("polat");  // sentax hatası,  append non const üye fonksiyonu, ama const üye fonk. const. olmayan üye fonk. 
		çağırdığı için sentax hatası
	};
}

--------------------------------------------     

mutable 

int main()
{
	string str{"deniz"};
	
	auto f = [str]()mutable{    
		str.append("polat");  // ok
	};
}

------------------------------------------------------     

capture by reference

int main()
{
	string str{"deniz"};
	
	auto f = [&str]()mutable{    
		str.append("polat");  // ok, sınıfın veri elemanını değil, sınıfın veri elemanının yerine geçtiği nesneyi yani str'yi değiştirmiş olurduk
	};
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	int a{}, b{}, c{}, d{};
	
	auto f = [a, b, c, d](){  // copy capture
	
	};
}

--------------------------------------------------------     

int main()
{
	int a{}, b{}, c{}, d{};
	
	auto f = [a, &b, c, &d](){  // reference capture
		a = 2;  // sentax hatası
		b = 2; // ok
	};
}

-----------------------------------------------------------     

capture all by copy :

int main()
{
	int a{}, b{}, c{}, d{};
	
	auto f = [ = ]( int x){ 
		return x * (a + b + c +d);
	};
}

-----------------------------------------------------------     

capture all by reference :

int main()
{
	int a{}, b{}, c{}, d{};
	
	auto f = [ & ]( int x){ 
		a *= x;
		b *= x;
		c *= x;
		d *= x;
	};
}

*-----------------------------------------------------------------------------------------------------     




[ = , &x] : capture by all copy, but x by reference

*-----------------------------------------------------------------------------------------------------     

soru : static ömürlü değişkenleri capture etmeme gerek mi yok yoksa capture edersem
sentax hatası olur mu ? sentax hatası


int x = 5;

int main()
{
	[x];  // hata !!!
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	[]{std::cout << "necco\n";}();   // parametre olmaması durumunda () yazılmayabilir. 
}

*-----------------------------------------------------------------------------------------------------     

dangling reference :  (anlamadım !!!!)

auto  func(int x )
{
	auto f = [&x]() { ++x;};
	
	return f;  // lambda geri döndürme, yani sınıf nesnesi geri döndürdün
}

int main()
{
	auto f = func(10);  // fonk. parametre değişkeninin x'in hayatı bitti, 
	
	f();  // dangling reference'i dereference ediyor, tanımsız davranış, çok tehlikeli
}

https://riptutorial.com/cplusplus/example/17029/accessing-a-dangling-reference

*-----------------------------------------------------------------------------------------------------     

lambda ifadelerini tipik olarak nasıl kullanıyoruz ?

3 tane sık kullanım şekli var. 

en sık kullanıldığı yer : algoritmalara argüman olarak göndermek

birçok algoritma bir parametresini callable istiyor.

*-----------------------------------------------------------------------------------------------------     

// istediğim rname() + '_' + rfname

#include "nutility.h"

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 50, &rname);  // random fill, son parametre function pointer veya function object olabilir 
	
	print(svec);
}

----------------------------------------------     

#include "nutility.h"

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 50, []{return rname() + ' ' + rfname();} );    // bir function object gönderdik
	
	print(svec);
}

-------------------------------------------------------------------------     

uzunluğu 10'nun üzerinde olanları bir vector'e kopyala

#include "nutility.h"
#include <fstream>

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 500, []{return rname() + ' ' + rfname();} );    // bir function object gönderdik
	vector<string> destvec(500);
	size_t len;
	cout << "uzunluk degerini giriniz : ";
	cin >> len;
	
	auto dest_end = copy_if(svec.begin(), svec.end(),  destvec.begin(), 
	[len](const auto &s){return s.length() == len;});  // son terim predicate geri dönüş değeri bool olan fonksiyonlar
	
	std::ofstream ofs{"out.txt"};
	if(!ofs){
		cerr << "out.txt dosyası olusturulamadı\n",
		exit(EXIT_FAILURE);
	}
	
	print(destvec.begin(), dest_end, "\n");  // range parametre ister
}

*-----------------------------------------------------------------------------------------------------     

// count algoritması

int main()
{
	using namespace std;
	
	vector<int> ivec;
	rfill(ivec, 1'000'000, Irand{0, 10'000} );    // bir function object gönderdik
	
	int ival;
	
	cout << "sayilacak degeri girin: ";
	cin >> ival;
	
	std::cout << count(ivec.begin(), ivec.end(), ival) << "\n";  // kac tane ival'in degerine esit deger var ?
}

-----------------------------------------     

// count_if algoritması

int main()
{
	using namespace std;
	
	vector<int> ivec;
	rfill(ivec, 1'000'000, Irand{0, 10'000} );    // bir function object gönderdik
	
	int low, high;
	
	cout << "sayilacak deger araligini giriniz : ";
	cin >> low >> high;
	
	count_if(begin(ivec), end(ivec), [low, high] (int i) 
		{return i >= low && i <= high;}) 
		<<  "\n"; // global begin ve end'i tercih edelim
}

-----------------------------------------      veya

// count_if algoritması

int main()
{
	using namespace std;
	
	vector<int> ivec;
	rfill(ivec, 1'000'000, Irand{0, 10'000} );    // bir function object gönderdik
	
	int low, high;
	
	cout << "sayilacak deger araligini giriniz : ";
	cin >> low >> high;
	
	const auto mypred =  [low, high] (int i) {return i >= low && i <= high;};  // const olması daha iyi, okuyana daha iyi bilgi verir
	
	count_if(begin(ivec), end(ivec), mypred) <<  "\n";
}

*-----------------------------------------------------------------------------------------------------     

C++'da nesnelerimiz doğrudan mutable

*-----------------------------------------------------------------------------------------------------     

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 500, []{return rname() + ' ' + rfname();} );    // bir function object gönderdik
	vector<string> destvec(500);
	
	string str;
	cout << "icinde hangi yazi olanlar : ";
	cin >> str;
	
	auto dest_end = copy_if(svec.begin(), svec.end(),  destvec.begin(), 
		[str](const string &s){return s.find(str) != string::npos;}); 
	
	print(destvec.begin(), dest_end, "\n");  // range parametre ister
}

*-----------------------------------------------------------------------------------------------------     

transform algoritması : 

iki overload'u var

birinci öğeyi aynı callable'a gönder ve geri dönüş değerini başlangıç konumunu istediğin yere sırayla yaz

transform algoritmasının kaç tane template parametresi olmalı ?
iki range, bir kaynak bir hedef range, iki iteratör olmalı ve bir callable türü

#include <vector>
#include "nutility.h"

template<typename InIter, typename OutIter, typename UnFunc>
OutIter Transform(InIter beg, InIter end, OutIter destbeg, UnFunc f)
{
	while(beg != end){
		*destbeg++ = f(*beg++);
	}
	
	return destbeg;
}

*-----------------------------------------------------------------------------------------------------     

1. overloadu

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 100, rname);
	print(svec);
	
	vector<string> destvec(100);

	string suffix;
	cout << "isimlere ne eklensin :  ";
	cin >> suffix;
	transform(svec.begin(), svec.end(), destvec.begin(), [suffix](const string &s) {return s + suffix; });
	
	print(destvec);
}

*-----------------------------------------------------------------------------------------------------     

int main()
{
	using namespace std;
	
	vector<string> svec;
	rfill(svec, 100, rname);
	print(svec);
	
	vector<size_t> lenvec(100);

	string suffix;
	cout << "isimlere ne eklensin :  ";
	cin >> suffix;
	transform(svec.begin(), svec.end(), lenvec.begin(), [](const string &s) {return s.size(); });
	
	print(lenvec);
}

*-----------------------------------------------------------------------------------------------------     

2. overload'u

bu kez unary değil binary function

bu sefer iki tane kaynak range var, bu range'deki öğeleri çifter olarak bir fonk.'a gönderiyorum. Fonk.'nun geri
dönüş değerini de hedef range'e yazıyorum.


template<typename InIter1, typename InIter2, typename OutIter, typename BiFunc>
OutIter Transform(InIter beg1, InIter end, InIter2 beg2, OutIter destbeg, BiFunc f)
{
	while(beg1 != end){
		*destbeg++ = f(*beg1++, *beg2++);
	}
	return destbeg;
}

*-----------------------------------------------------------------------------------------------------     

#include <vector>
#include "nutility.h"
#include <list>

int main()
{
	using namespace std;
	
	vector<string> namevec;
	vector<string> surname_vec;
	
	rfill(name_vec, 100, rname);
	rfill(surname_vec, 100, rfname);
	
	list<string> dest_list(100);
	
	transform(name_vec.begin(), name_vec.end(), surname_vec.begin(), dest_list.begin(), 
		[](const string& s1, const string& s2) {
			return s1 + " " + s2;
		});
		
	print(dest_list.begin(), dest_list.end(), "\n");
}

*-----------------------------------------------------------------------------------------------------     

lambda ifadeleri nerelerde kullanılıyor, ilk yöntem gösterildi. 

2. sık kullanıldığı yer : değişkene isim vermek ve birden fazla yerde kullanmak
kodun kolay okunmasını sağlamak için isimlendirmek

3. immediately invoked function expression

lambda ifadesinden elde edilen pr value olan nesneyi doğrudan fonk. çağrı operatörünün fonk. yapıyorsunuz
bunu yapmanızın en tipik nedeni  const. bir nesneyi init. etmek

*-----------------------------------------------------------------------------------------------------     

ideali nesnelere ilk değer vermek, öyle durumlar var ki const. nesneler

const bir nesneye zaten ilk değer vermek zorunlu

const Myclass m = x;  // copy const. çağrılırdı

const Myclass m =   // koşula bağlı olara ya o değer ya bu değerle hayata getirceksem turnary operator kullanırım

*-----------------------------------------------------------------------------------------------------     

// nesneye verilen ilk değer belirli hesaplamalarla elde edilecek

Myclass get_xyza(???)
{
	///
}

const Myclass m =  get_xyza(a,b,c,d);  // dezavantajı : fonk. ile ilk değer veren ifade arasında büyük boşluk var

const Myclass mx = [&]() {  //  immediately invoked function expression
	//. .
} ();

*-----------------------------------------------------------------------------------------------------     

soru : derleyicinin lambda ifadesi karşılığı yazdığı sınıfın elemanlarını görebiliyor muyuz ?
direk göremiyoruz, fakat dilin kurallarını biliyorsanız zihninizde canlandırabilirsiniz

------------------------------------------------------     

eğer lambda stateless ise örtülü bir dönüşümü var (biz görmesek de), sınıf türünden nesneyi  function pointer türüne dönüştürüyor.

int main()
{
	using namespace std;
	
	auto fsquare = [](int x) {return x * x; };  // stateless lambda çünkü capture yok
	
	int (*fptr)(int) = fsquare;  // sentax hatası olmadı, örtülü dönüşüm, function pointer derleyicinin yazdığı fonk.'nun adresini tutuyor
	cout << fptr(46) << "\n";
}

stateless lambda otomatik olarak ilgili function pointer türüne dönüşür (bu free function pointer'dır, member function pointer değildir )

----------------------------------------------------------------     

int main()
{
	using namespace std;
	
	int ival{12};
	
	auto f = [ival](int x) {return x * x; }; 
	
	int (*fptr)(int) = f;  // sentax hatası !!!
	cout << fptr(46) << "\n";
}

*-----------------------------------------------------------------------------------------------------     

C++ 20 ile çok değişiklik geldi

*-----------------------------------------------------------------------------------------------------     

// C++ 20'de ok, öncesinde lambdaların default const. delete edilmiş 
int main()
{
	auto fsquare = [](int x) {return x * x; };  // fsquare'in türü ne ? 
	
	decltype(fsquare) fx;  // sentax hatası, C++ 20'den önce lambda'ların default const. delete edilmiş
	
}

*-----------------------------------------------------------------------------------------------------     
