
İçerik:

variable template
Perfect Forwarding (Mükemmel gönderim) 
VARIADIC TEMPLATES : (variyadik şablonlar)
STL : STANDART TEMPLATE LIBRARY

özet:


*-----------------------------------------------------------------------------------------------------    

60 ders olacakmış totalde, 

*-----------------------------------------------------------------------------------------------------    

variable template : değişken tanımlamasının template haline getirilmesi

 template <class T>
constexpr T pi = T(3.141592653L);  // variable template

// şöyle de yazılabilir
constexpr T pi = static_cast<T>(3.141592653L);

template<class T>
T circular_area(T r)  // function template
{
	return pi<T> *r *r;  // pi<T> is a variable template instantiation
}

int main()
{
	pi<double>;
}

*-----------------------------------------------------------------------------------------------------    

#include <type_traits>

template<typename T>
constexpr bool IsPointer_v = std::is_pointer<T>::value;

int main()
{
	std::is_pointer<int>::value;  // bunun yerine 
	
	
	constexpr auto f = IsPointer_v<int>;
	constexpr auto t = IsPointer_v<int *>;
}

// meta fonksiyonlarda bazı değerlerin yazılmasını kolaylaştırmak

*-----------------------------------------------------------------------------------------------------    

meta fonksiyonlar : bir kısmı değer bir kısmı tür hesaplar

#include <type_traits>

int main()
{
	std::is_pointer<int*>::value;  // pointer türü ise true değil ise false olacak
}

*-----------------------------------------------------------------------------------------------------    

#include <type_traits>

template <typename T>
void func(T x)
{
	// std::is_pointer<T>::value;  // yerine
	std::is_pointer_v<T>;
}

int main()
{

}

*-----------------------------------------------------------------------------------------------------    

Perfect Forwarding (Mükemmel gönderim) :

void func(P1, P2, P3);

func(x, y, 12);

call_func(x, y, 12);

func'ı doğrudan çağırmam ile 
call_func func'ı çağırması, fakat arada bir fark olsun istemiyorum.

başlangıçta bunun kolay olduğunu düşünebilirsiniz ama kolay değil

*-----------------------------------------------------------------------------------------------------    

class Myclass{

};

void func(Myclass&)
{
	std::cout << "func(Myclass&)\n";
}

void func(const Myclass&)
{
	std::cout << "func(const Myclass&)\n";
}

void func(Myclass&&)
{
	std::cout << "func(Myclass&&)\n";
}

int main()
{
	Myclass m;
	const Myclass cm;
	
	func(m);     // func(Myclass&)
	func(cm);    //  func(const Myclass&)
	func(Myclass{});  //  func(Myclass&&)
} 

*-----------------------------------------------------------------------------------------------------    

class Myclass{

};

void func(Myclass&)
{
	std::cout << "func(Myclass&)\n";
}

void func(const Myclass&)
{
	std::cout << "func(const Myclass&)\n";
}

void func(Myclass&&)
{
	std::cout << "func(Myclass&&)\n";
}

void  call_func(Myclass& x)
{
	func(x);
}

void  call_func(const Myclass& x)
{
	func(x);
}

void  call_func(Myclass&& x)
{
	func(x);  // not ok
	func(std::move(x));  // x'in data type'i Myclass&&, x ifadesinin değer kategorisi Lvalue exp
	// move ile rvalue'a dönüştürürsem olur.
}

int main()
{
	Myclass m;
	const Myclass cm;
	
	func(m);     // func(Myclass&)
	call_func(m); 
	func(cm);    //  func(const Myclass&)
	call_func(cm); 
	func(Myclass{});  //  func(Myclass&&)
	call_func(Myclass{});
} 

// call_func( ...)  3 nokta yerine gelen parametreye göre ilgili fonksiyonu çağırmalı, bu probleme perfect forwarding denir.

*-----------------------------------------------------------------------------------------------------    

func(T1 t1, T2 t2, T3 t3, T4 t4)

24 tane fonk. yazmanız gerekir ve karmaşık olur. Yeni bir yapıya ihtiyaç var. 
Derleyiciye yazdıralım. call_func template olsun.

*-----------------------------------------------------------------------------------------------------    

template <typename T>
void call_func(T x)
{
	func(x); // lvalue exp. göndermiş olur, işe yaramaz !!!
}

*-----------------------------------------------------------------------------------------------------    

template <typename T>
void call_func(T& x)
{
	func(x); //   call_func(Myclass{}) çağrısı sentax hatası olur. Bu da işe yaramaz !!!
}

*-----------------------------------------------------------------------------------------------------    

template <typename T>
void call_func(T&& x)
{
	func(std::forward<T>(x));   // ok
}

*-----------------------------------------------------------------------------------------------------    

class Myclass{

};

void func(Myclass&)
{
	std::cout << "func(Myclass&)\n";
}

void func(const Myclass&)
{
	std::cout << "func(const Myclass&)\n";
}

void func(Myclass&&)
{
	std::cout << "func(Myclass&&)\n";
}

template <typename T>
void call_func(T&& x)
{
	func(std::forward<T>(x));   // ok
}

int main()
{
	Myclass m;
	const Myclass cm;
	
	func(m);     // func(Myclass&)
	call_func(m); 
	func(cm);    //  func(const Myclass&)
	call_func(cm); 
	func(Myclass{});  //  func(Myclass&&)
	call_func(Myclass{});
} 

*-----------------------------------------------------------------------------------------------------    

forward fonk. aslında nasıl çalıştığınız gösterme

template <typename T>
T&& Forward(typename std::remove_reference<T>::type& param)
{
	return static_cast<T&&>(param)
}

template <typename T>
void call_func(T&& x)
{
	func(std::Forward<T>(x));   // ok
}

*-----------------------------------------------------------------------------------------------------    




*-----------------------------------------------------------------------------------------------------    

template <typename T>
void func(T &&x)
{
	f(std::forward<T>(x))
}

*-----------------------------------------------------------------------------------------------------    

template <typename T, typename U, typename V, typename W>
void func(T &&t, U&& u, V&& v, W&& w)
{
	f(std::forward<T>(t),std::forward<U>(u), std::forward<V>(v), std::forward<W>(w));
}

*-----------------------------------------------------------------------------------------------------    

Neden perfect forwarding var ? 

Aldığı argümanların value categorisini, const.'luğunu koruyarak senin adına göndereyim diyor.
En tipik örnek standart kütüphanenin container sınıfların emplace fonksiyonu.
eklemek için push_back, emplace back aslında benim aldığım argümanları  copy const.
kullanarak container'ın ayarladığı bellek alanında nesneyi oluşturur.

vector<Fighter> fvec;
Fighter f(a, b, c, d);

fvec.push_back(f);
fvec.emplace_back(a, b, c, d); // gereksiz bir kopyalamadan kaçınmak için kullanılır. Perfect forwarding. Sen 
bu argümanlarla sınıfın 4 parametreli const.'ına çağrı yap

*-----------------------------------------------------------------------------------------------------    

template <typename T>
class Myclass{

public:
	void func(T&&);  // parametresi forwarding reference mıdır ?  hayır universal reference değil
};

int main()
{
	Myclass<int> x;
	
	x.func();
}

*-----------------------------------------------------------------------------------------------------    

template<typename T>
void func(const T&&) // forwarding ref. olması için const. ile nitelenmemiş olması gerekir , hiç ilavesi olmayacak
{

}

*-----------------------------------------------------------------------------------------------------    

class Nec{
public:
	Nec(std::string& x, const std::string& y, std::string &&z)  // sol sol sağ taraf ref.
};

int main()
{
	std::make_unique<Nec>();  // argümanları gönderiyorum, kendi içinde new operatörü ile 
	// perfect_forwarding ediyor
}

*-----------------------------------------------------------------------------------------------------    

VARIADIC TEMPLATES : (variyadik şablonlar)

Myclass<> 
Myclass<int>
Myclass<int, double>
Myclass<int, double, long>

*-----------------------------------------------------------------------------------------------------    

#include <tuple>

int main()
{
	std::tuple<int> x1;
	std::tuple<double, double> x2;
	std::tuple<double, double, int> x3;
	std::tuple<double, double, int, int> x4;
}

tuple bir variadik sınıf şablonu

*-----------------------------------------------------------------------------------------------------    

make_unique  : variadic class template

*-----------------------------------------------------------------------------------------------------    

// ...'a elipsis denir

template<typename ...Args>                       

*-----------------------------------------------------------------------------------------------------    

template<typename ...Args> 
class Myclass{

};                    

int main()
{
	Myclass<int, int, double> x;
}

------------------    

böyle bir araç olmasa siz şu şekilde yazmak gerekecekti

template<typename T, typename U, typename W> 
class Myclass{

};                    

int main()
{
	Myclass<int, int, double> x;
}

*-----------------------------------------------------------------------------------------------------    

// template parameter pack 
template<typename ...Args> 
void func(Args ...args)
{

}                

-------------------------
variadik olmasaydı

template<typename T1, typename T2, typename T3>
void func(T1 p1, T2 p2, T3 p3)
{

}

*-----------------------------------------------------------------------------------------------------    

template parametre paketi ile fonksiyon parametre paketini karıştırmayalım

// template parameter pack 
template<typename ...Ts>    // template parametrelerinin oluşturduğu paket
void func(Ts ...args)    // fonksiyon değişkenlerinin oluşturduğu paket
{
	Ts;  // int, double, string
	args;  // p1, p2, p3
}  

*-----------------------------------------------------------------------------------------------------    

template<typename ...Ts>    
void func(Ts& ...args)    // derleyicinin yazacağı fonk.'nun tüm parametreleri sol taraf referansı olacak
{
	
}  

*-----------------------------------------------------------------------------------------------------    

template<typename ...Ts>    
void func(Ts&& ...args)    // derleyicinin yazacağı fonk.'nun tüm parametreleri universal referans olacak
{
	
}  

*-----------------------------------------------------------------------------------------------------    

make_unique nasıl bir fonk. şablonu ?

template <typename T, typename ...Ts>
std::unique_ptr<T> MakeUnique(Ts&&  ...args)
{

}

*-----------------------------------------------------------------------------------------------------    

sizeof...()   operatörü :

template <typename ...Ts>
void func(Ts ...args)
{
	sizeof...(args);  // pakette kaç ifade var, compile time sabiti
}

*-----------------------------------------------------------------------------------------------------    

template <typename ...Ts>
void func(Ts ...args)
{
	int a[sizeof...(args)] = {};  // cevap : 4, const. expression'dir. 
}

int main()
{
	func(2, 3.4, 6.7, 5 );
}

*-----------------------------------------------------------------------------------------------------    

template <typename ...Ts>
void func(Ts ...args)
{
	constexpr auto val = sizeof...(args);  // const. expression olmasa sentax hatası olurdu
}

int main()
{
	func(2, 3.4, 6.7, 5 );
}

*-----------------------------------------------------------------------------------------------------    

template <typename ...Ts>
struct Nec{
	constexpr static int value = sizeof...(Ts);
};

int main()
{
	constexpr auto x = Nec<int, int>::value;  // cevap : 2;
	constexpr auto y = Nec<int, int, double, int, char>::value;  // cevap : 5;
}

*-----------------------------------------------------------------------------------------------------    

eğer sınıf veya fonk. şablonu içinde pakette ne varın cevabı : sizeof...()

*-----------------------------------------------------------------------------------------------------    

// pack expansion

Ts...  // her bir tür virgüllerle ayrılmış liste

template <typename ...Ts>
void func(Ts ...args)
{
	std::tuple< Ts... >  x; // int, char, long açılımı
	
	std::cout << typeid(x).name() << "\n";
}

int main()
{
	func(1);   // tuple int açılımı
	func(1, 2.3);   // tuple int, double açılımı
}

*-----------------------------------------------------------------------------------------------------    

template <typename ...Ts>
class Myclass : public Nec<Ts...> {

};

int main()
{
	Myclass<int, double> 
}

*-----------------------------------------------------------------------------------------------------    

template <typename ...Ts>
void func(Ts ...args)
{
	foo(args... );  // fonksiyon parametre paketi expand ediliyor. fonksiyonun parametreleri virgüllerle ayrılmış bir listeye
	// dönüştürüyor
	// aslında foo(p1, p2, p3);
}

*-----------------------------------------------------------------------------------------------------  

template <typename ...Ts>
void func(Ts ...args)
{
	foo(&args... ); 
	// aslında foo(&p1, &p2, &p3);
}

*-----------------------------------------------------------------------------------------------------    

https://en.cppreference.com/w/cpp/language/parameter_pack


Expansion loci


f(&args...);             // expands to f(&E1, &E2, &E3)
f(n, ++args...);         // expands to f(n, ++E1, ++E2, ++E3);
f(++args..., n);         // expands to f(++E1, ++E2, ++E3, n);
f(const_cast<const Args*>(&args)...);
// f(const_cast<const E1*>(&X1), const_cast<const E2*>(&X2), const_cast<const E3*>(&X3))
f(h(args...) + args...); // expands to 
// f(h(E1, E2, E3) + E1, h(E1, E2, E3) + E2, h(E1, E2, E3) + E3)


*-----------------------------------------------------------------------------------------------------    

printf gibi bir fonksiyonu variadic template olarak ifade etmek için ne yapabilirim ?

printf'i eleştirdik, type safe değil

*-----------------------------------------------------------------------------------------------------    

biz variadic template'lerden nasıl faydalanacağız ? önemli olan bu

template <int ...x>
class Myclass {

};

*-----------------------------------------------------------------------------------------------------    

variadic fonksiyonu nasıl oluşturabiliriz ?

1)  recursive  (bu en fazla kafa karıştıran teknik)
2) initializer list
3) fold expression (katlama ifadeleri)
4) constexpr if

*-----------------------------------------------------------------------------------------------------      

amaç : printf benzeri fakat type safe bir fonk. oluşturmak

1)  recursive  (eksiltme tekniği)

template <typename T>
void print(const T& r)
{
	std::cout << r << "\n";
}

template <typename T, typename ...Ts>
void print(const T& r, const Ts& ...args)
{
	std::cout << sizeof...(Ts) << "\n";
	std::cout << __FUNCSIG__  << "\n";  // makro !!!
	print(r);
	print(args...);  
}

int main()
{
	int x = 999;
	double d = 99.9;
	
	std::string name{"cem"};
	print(x, d, 999L, 999.f);
}

*-----------------------------------------------------------------------------------------------------      

template<typename T>
T summer(T v)  // sadece 1 eleman kalınca bu fonks. devreye girer !!!
{
	return v;
}

template<typename T, typename... Args>
T summer(const T& first, const Args& ...args)
{
	std::cout << "necati\n";
	return first +  summer(args...);
}

int main()
{
	std:: cout << summer(10, 20, 30, 80, 17) <<  "\n";
	std::string s1 = "nec", s2 = "ati", s3 = "Er";
	std::cout << summer(s1, s2, s3, "gin") << "\n";
}

*-----------------------------------------------------------------------------------------------------      

2) initializer list

C'deki comma operatörü iyi anlamak lazım

(std::cout << p1, 0)  // ilk önce sol taraf değerlendirildikten sonra sağdaki değer değerlendirilecek
virgül operatörü sağındaki değeri üretir

template <typename ...Ts>
void print(const Ts& ...args)
{
	int a[] = { (std::cout << args , 0)... };  // hepsinin değeri sıfır olan dizi olur
	
	std::initializer_list<int> { (std::cout << args , 0)...  };  //bir sınıf türü olduğundan isim vermek zorunda değilim
	
	(void) std::initializer_list<int> { (std::cout << args << " " , 0)...  };  // kullanmıyom anlamında void türüne cast edersek derleyicinin vereceği uyarı mesajından kurtuluruz
}

int main()
{
	print(12, 5.6, "oguzhan", std::bitset<16>(562));
}

*-----------------------------------------------------------------------------------------------------      

template <typename ...Ts>
void print(const Ts& ...args)  // şimdi gönderdiğim herşeyi yazdırır
{
	(std::cout << args , 0)...
	// (std::cout << p1, 0),  (std::cout << p2, 0)
}

*-----------------------------------------------------------------------------------------------------      

3) fold expression (katlama ifadeleri)

burada github'da variadic templates kısmında fold örnekleri var.
Ama sonra ilerleyen kısımda anlatılacak

*-----------------------------------------------------------------------------------------------------      

değişken sayıda parametre için perfect forwarding

template <typename ...Ts>
void func(Ts&& ...args)
{
	std::forward<Ts>(args)...
	// std::forward<A>(p1), std::forward<B>(p1)  // anlamında gelir
	
	foo(std::forward<Ts>(args)...)  //bu fonkisyona aldığınız argümanları perfect forward etmil olacaksınız
}

*-----------------------------------------------------------------------------------------------------      

template <typename ...Ts>
void foo(Ts&& ...args)
{
	std::tuple<Ts...> x(args...);  // tuple'a perfect forward
}

template <typename ...Ts>
void func(Ts&& ...args)
{
	foo(std::forward<Ts>(args)...);  // foo'ya perfect forward
}

*-----------------------------------------------------------------------------------------------------      

STL : STANDART TEMPLATE LIBRARY

C++'ın standart kütüphanesinin çoğu ama tamamı değil

nikolay usethis'in  STL kitabı tavsiye

bütün öğeler template'dir , generic kütüphanedir. 

yeni kütüphane eklenmiş : ranges

başrol oyuncuları:
1) container
2) iterator
3) algoritmalar

*-----------------------------------------------------------------------------------------------------      

container (kap) : veri yapılarını implemente eden sınıf şablonları


sequence containers:
std::vector : dinamik veri dizi yapısı
std::deque  : dinamik dizilerin dizisi
std::list : çifte bağlı liste, düğümler var, bir pointer bir sonrakini diğer pointer bir öncekini tutar
std::forward_list  : (C++11)
std::array : C dizilerini sarmalayan bir sınıf şablonu, wrapper class
std::string : yazılarla ilgili bir sınıf, dinamik dizi

associative containers: (ikili arama ağacı)
std::set  : bir anahtar var, anahtarı kullanarak sorgulama yapabiliyoruz, ekleme, silme
std::multi_set : bir anahtardan birden fazla olur
std::map : pair tutar, anahtarla arama yapabiliyoruz
std::multi_map : bir anahtardan birden fazla olur.

unordered associative containers:
std::unordered_set  :
std::unordered_multi_set : 
std::unordered_map : 
std::unordered_multi_map :


*-----------------------------------------------------------------------------------------------------      

iterators : pointer'ların daha soyutlanmış hali,
bir veri yapısındaki öğenini konumunu tutan nesne
pointer'lar iteratör olarak kullanılabilir

https://www.geeksforgeeks.org/iterators-c-stl/


algorithms : algoritmaları implemente eden fonksiyon şablonları

*-----------------------------------------------------------------------------------------------------      

STL genişletilebilir yapıda. Yeni container'lar eklenebilir.
Yeni iteratör sınıfları eklenebilir. 

STL'de nesne yönelimli programlama neredeyse hiç yok. 


*-----------------------------------------------------------------------------------------------------      
